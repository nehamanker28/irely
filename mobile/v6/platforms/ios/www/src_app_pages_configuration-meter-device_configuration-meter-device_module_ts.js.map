{"version":3,"sources":["./src/app/pages/configuration-meter-device/configuration-meter-device-routing.module.ts","./src/app/pages/configuration-meter-device/configuration-meter-device.module.ts","./src/app/pages/configuration-meter-device/configuration-meter-device.page.ts","./src/app/pages/configuration-meter-device/configuration-meter-device.page.scss","./src/app/pages/configuration-meter-device/configuration-meter-device.page.html"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAE0B;AAEjF,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,0FAA4B;KACxC;CACF,CAAC;IAMW,yCAAyC,SAAzC,yCAAyC;CAAG;AAA5C,yCAAyC;IAJrD,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,yCAAyC,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;AChBb;AACM;AACF;AAEA;AAE2D;AAEvB;AACZ;IAcxD,kCAAkC,SAAlC,kCAAkC;CAAG;AAArC,kCAAkC;IAZ9C,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,iHAAyC;SAC1C;QACD,YAAY,EAAE,CAAC,0FAA4B,CAAC;QAC5C,SAAS,EAAE;YACT,+EAAe;SAChB;KACF,CAAC;GACW,kCAAkC,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBG;AAE6D;AAChD;AACD;AACA;AACuB;IAOxE,4BAA4B,SAA5B,4BAA4B;IAsLvC,6DAA6D;IAE7D,oBAAoB;IACpB,oBAAoB;IACpB,oBAAoB;IACpB,eAAe;IACf,kBAAkB;IAClB,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;IAClB,qBAAqB;IACrB,kBAAkB;IAClB,kBAAkB;IAGlB,YAAmB,aAA4B,EAAU,aAA4B,EAAU,SAA0B,EAAS,WAA8B,EAAU,WAAoB,EAAU,SAA0B,EAAU,SAAoB;QAA7O,kBAAa,GAAb,aAAa,CAAe;QAAU,kBAAa,GAAb,aAAa,CAAe;QAAU,cAAS,GAAT,SAAS,CAAiB;QAAS,gBAAW,GAAX,WAAW,CAAmB;QAAU,gBAAW,GAAX,WAAW,CAAS;QAAU,cAAS,GAAT,SAAS,CAAiB;QAAU,cAAS,GAAT,SAAS,CAAW;QAhMhQ,qBAAgB,GAAG,EAAE,CAAC;QACtB,sBAAiB,GAAG,EAAE,CAAC;QAqJvB,QAAG,GAAS,MAAM,CAAC;QACnB,qBAAgB,GAAG,MAAM,CAAC;QAC1B,uBAAkB,GAAG,CAAC,CAAC;QAOvB,gBAAW,GAAG,EAAE,CAAC,CAAS,6CAA6C;QAKvE,yBAAoB,GAAG,EAAE,CAAC;QAE1B,6BAAwB,GAAG,EAAE,CAAC;QAC9B,wBAAmB,GAAG,EAAE,CAAC;QACzB,2BAAsB,GAAG,EAAE,CAAC;QAC5B,yBAAoB,GAAG,CAAC,CAAC;QAEzB,6BAAwB,GAAG,EAAE,CAAC;QAC9B,wBAAmB,GAAG,EAAE,CAAC;QACzB,2BAAsB,GAAG,EAAE,CAAC;QAC5B,yBAAoB,GAAG,CAAC,CAAC;QAmBvB,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC;IACvC,CAAC;IAED,QAAQ;IACR,CAAC;IAED,mBAAmB;IAEnB,eAAe;QACb,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,EAAE,CAAC,aAAa,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE,GAAE,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC;QAErE,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAEnC,EAAE,CAAC,wBAAwB,GAAG,EAAE,CAAC,aAAa,CAAC,wBAAwB,CAAC;QACxE,EAAE,CAAC,wBAAwB,GAAG,EAAE,CAAC,aAAa,CAAC,wBAAwB,CAAC;QACxE,EAAE,CAAC,mBAAmB,GAAG,EAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC;QAC9D,EAAE,CAAC,mBAAmB,GAAG,EAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC;QAC9D,EAAE,CAAC,sBAAsB,GAAG,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC;QAC1D,EAAE,CAAC,sBAAsB,GAAG,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC;QAC1D,EAAE,CAAC,oBAAoB,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC;QAC3D,EAAE,CAAC,oBAAoB,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC;IAC7D,CAAC;IAED,SAAS;QACL,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,EAAE,CAAC,aAAa,GAAG,EAAE,CAAC;QACtB,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE,GAAE,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC;IACvE,CAAC;IAED,WAAW;QACP,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,EAAE,CAAC,eAAe,GAAG,EAAE,CAAC;QACxB,EAAE,CAAC,cAAc,GAAG,IAAI,CAAC;QAEzB,EAAE,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE,GAAE,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;IAC3E,CAAC;IAED,cAAc,CAAC,IAAI;QACjB,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,IAAG,IAAI,IAAI,CAAC,EAAE;YACZ,EAAE,CAAC,aAAa,CAAC,eAAe,GAAG,EAAE,CAAC,oBAAoB,CAAC;SAC5D;aACI;YACH,EAAE,CAAC,aAAa,CAAC,eAAe,GAAG,EAAE,CAAC,oBAAoB,CAAC;SAC5D;QACD,EAAE,CAAC,WAAW,CAAC,gBAAgB,CAAC,2BAA2B,EAAE;YAC3D,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC;gBACnB,WAAW,EAAE,IAAI;aAClB,CAAC,CAAC;QACL,CAAC,EAAE,IAAI,CAAC,CAAC;IACX,CAAC;IAED,gBAAgB,CAAC,IAAI;QACnB,IAAI,EAAE,GAAG,IAAI,CAAC;QAEd,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAElB,IAAG,IAAI,IAAI,CAAC,EAAE;YACZ,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;YACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;YAE9D,IAAG,EAAE,CAAC,oBAAoB,IAAI,EAAE,CAAC,aAAa,CAAC,eAAe,EAAE;gBAC9D,EAAE,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;oBAClD,IAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE;wBACrD,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;wBACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;qBAC/D;oBACD,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;wBAC9D,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;oBAChC,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;iBACI;gBACH,IAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE;oBACrD,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;oBACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;iBAC/D;gBACD,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;aAC/B;SACF;aACI;YACH,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;YACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;YAE9D,IAAG,EAAE,CAAC,oBAAoB,IAAI,EAAE,CAAC,aAAa,CAAC,eAAe,EAAE;gBAC9D,EAAE,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;oBAClD,IAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE;wBACrD,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;wBACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;qBAC/D;oBACD,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;wBAC9D,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;oBAChC,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;iBACI;gBACH,IAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE;oBACrD,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;oBACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;iBAC/D;gBACD,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;aAC/B;SACF;IACH,CAAC;IAED,oBAAoB,CAAC,IAAI;QACvB,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAG,IAAI,IAAI,CAAC,EAAE;YACZ,EAAE,CAAC,aAAa,CAAC,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC;SAC7D;aACI;YACH,EAAE,CAAC,aAAa,CAAC,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC;SAC7D;QAED,IAAG,EAAE,CAAC,aAAa,CAAC,wBAAwB,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,aAAa,CAAC,wBAAwB,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE;YACvI,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;gBAC7C,IAAI,GAAG,IAAI,CAAC;gBACZ,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;oBAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAClB,IAAI,UAAU,GAAG,IAAI,CAAC;oBACtB,IAAI,eAAe,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;oBACnE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;oBAC7B,IAAI,YAAY,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBACxF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;oBAC1B,IAAI,iBAAiB,GAAG,QAAQ,CAAC,YAAY,EAAC,EAAE,CAAC,GAAG,EAAE,CAAC;oBACvD,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,iBAAiB,CAAC,CAAC;oBAErD,IAAG,iBAAiB,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE;wBACjD,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;4BAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;4BAClB,IAAI,UAAU,GAAG,IAAI,CAAC;4BACtB,IAAI,eAAe,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;4BACnE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;4BAC7B,IAAI,YAAY,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;4BACxF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;4BAC1B,IAAI,iBAAiB,GAAG,QAAQ,CAAC,YAAY,EAAC,EAAE,CAAC,GAAG,EAAE,CAAC;4BACvD,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,iBAAiB,CAAC,CAAC;4BACrD,IAAG,IAAI,IAAI,CAAC,EAAE;gCACZ,EAAE,CAAC,mBAAmB,GAAG,8BAA8B,GAAG,iBAAiB,GAAG,GAAG,CAAC;gCAClF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;gCAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;6BACpJ;iCACI;gCACH,EAAE,CAAC,mBAAmB,GAAG,8BAA8B,GAAG,iBAAiB,GAAG,GAAG,CAAC;gCAClF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;gCAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;6BACpJ;wBACH,CAAC,CAAC,CAAC;qBACJ;yBACI;wBACH,IAAG,IAAI,IAAI,CAAC,EAAE;4BACZ,EAAE,CAAC,mBAAmB,GAAG,8BAA8B,GAAG,iBAAiB,GAAG,GAAG,CAAC;4BAClF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;4BAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;yBACpJ;6BACI;4BACH,EAAE,CAAC,mBAAmB,GAAG,8BAA8B,GAAG,iBAAiB,GAAG,GAAG,CAAC;4BAClF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;4BAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;yBACpJ;qBACF;gBACH,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE;oBACV,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;wBAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAClB,IAAI,UAAU,GAAG,IAAI,CAAC;wBACtB,IAAI,eAAe,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;wBACnE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;wBAC7B,IAAI,YAAY,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBACxF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;wBAC1B,IAAI,iBAAiB,GAAG,QAAQ,CAAC,YAAY,EAAC,EAAE,CAAC,GAAG,EAAE,CAAC;wBACvD,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,iBAAiB,CAAC,CAAC;wBACrD,IAAG,IAAI,IAAI,CAAC,EAAE;4BACZ,EAAE,CAAC,mBAAmB,GAAG,8BAA8B,GAAG,iBAAiB,GAAG,GAAG,CAAC;4BAClF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;4BAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;yBACpJ;6BACI;4BACH,EAAE,CAAC,mBAAmB,GAAG,8BAA8B,GAAG,iBAAiB,GAAG,GAAG,CAAC;4BAClF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;4BAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;yBACpJ;oBACH,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;SACJ;aACI;YACH,EAAE,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;gBAC3C,IAAI,GAAG,IAAI,CAAC;gBACZ,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;oBAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAClB,IAAI,UAAU,GAAG,IAAI,CAAC;oBACtB,IAAI,eAAe,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;oBACnE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;oBAC7B,IAAI,YAAY,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBACxF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;oBAC1B,IAAI,iBAAiB,GAAG,QAAQ,CAAC,YAAY,EAAC,EAAE,CAAC,GAAG,EAAE,CAAC;oBACvD,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,CAAC;oBAEnD,IAAG,iBAAiB,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE;wBACjD,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;4BAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;4BAClB,IAAI,UAAU,GAAG,IAAI,CAAC;4BACtB,IAAI,eAAe,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;4BACnE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;4BAC7B,IAAI,YAAY,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;4BACxF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;4BAC1B,IAAI,iBAAiB,GAAG,QAAQ,CAAC,YAAY,EAAC,EAAE,CAAC,GAAG,EAAE,CAAC;4BACvD,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,CAAC;4BACnD,IAAG,IAAI,IAAI,CAAC,EAAE;gCACZ,EAAE,CAAC,mBAAmB,GAAG,4BAA4B,GAAG,iBAAiB,GAAG,GAAG,CAAC;gCAChF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;gCAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;6BACpJ;iCACI;gCACH,EAAE,CAAC,mBAAmB,GAAG,4BAA4B,GAAG,iBAAiB,GAAG,GAAG,CAAC;gCAChF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;gCAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;6BACpJ;wBACH,CAAC,CAAC,CAAC;qBACJ;yBACI;wBACH,IAAG,IAAI,IAAI,CAAC,EAAE;4BACZ,EAAE,CAAC,mBAAmB,GAAG,4BAA4B,GAAG,iBAAiB,GAAG,GAAG,CAAC;4BAChF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;4BAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;yBACpJ;6BACI;4BACH,EAAE,CAAC,mBAAmB,GAAG,4BAA4B,GAAG,iBAAiB,GAAG,GAAG,CAAC;4BAChF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;4BAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;yBACpJ;qBACF;gBACH,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE;oBACV,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;wBAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAClB,IAAI,UAAU,GAAG,IAAI,CAAC;wBACtB,IAAI,eAAe,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;wBACnE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;wBAC7B,IAAI,YAAY,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBACxF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;wBAC1B,IAAI,iBAAiB,GAAG,QAAQ,CAAC,YAAY,EAAC,EAAE,CAAC,GAAG,EAAE,CAAC;wBACvD,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,CAAC;wBACnD,IAAG,IAAI,IAAI,CAAC,EAAE;4BACZ,EAAE,CAAC,mBAAmB,GAAG,4BAA4B,GAAG,iBAAiB,GAAG,GAAG,CAAC;4BAChF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;4BAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;yBACpJ;6BACI;4BACH,EAAE,CAAC,mBAAmB,GAAG,4BAA4B,GAAG,iBAAiB,GAAG,GAAG,CAAC;4BAChF,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;4BAC9D,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,6CAA6C,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;yBACpJ;oBACH,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;SACJ;IAEH,CAAC;IAED,aAAa,CAAC,IAAI,EAAE,MAAM;QACxB,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,IAAG,IAAI,IAAI,CAAC,EAAE;YACZ,EAAE,CAAC,sBAAsB,GAAG,MAAM,CAAC,IAAI,CAAC;YACxC,EAAE,CAAC,aAAa,CAAC,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC;YAC5C,EAAE,CAAC,aAAa,CAAC,eAAe,GAAG,EAAE,CAAC,oBAAoB,CAAC;SAC5D;aACI;YACH,EAAE,CAAC,sBAAsB,GAAG,MAAM,CAAC,IAAI,CAAC;YACxC,EAAE,CAAC,aAAa,CAAC,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC;YAC5C,EAAE,CAAC,aAAa,CAAC,eAAe,GAAG,EAAE,CAAC,oBAAoB,CAAC;SAC5D;IACH,CAAC;IAED,gBAAgB,CAAC,IAAI;QACnB,IAAI,EAAE,GAAG,IAAI,CAAC;QAEd,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAElB,IAAG,IAAI,IAAI,CAAC,EAAE;YACZ,EAAE,CAAC,wBAAwB,GAAG,EAAE,CAAC;YACjC,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;YACxE,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;YACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;YAE9D,IAAG,EAAE,CAAC,oBAAoB,IAAI,EAAE,CAAC,aAAa,CAAC,eAAe,EAAE;gBAC9D,EAAE,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;oBAClD,IAAG,EAAE,CAAC,wBAAwB,IAAI,EAAE,EAAE;wBACpC,EAAE,CAAC,wBAAwB,GAAG,EAAE,CAAC;wBACjC,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;qBACzE;oBACD,IAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE;wBACrD,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;wBACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;qBAC/D;oBACD,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;wBAC9D,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAE,EAAE;4BAClC,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;wBAChC,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;iBACI;gBACH,IAAG,EAAE,CAAC,wBAAwB,IAAI,EAAE,EAAE;oBACpC,EAAE,CAAC,wBAAwB,GAAG,EAAE,CAAC;oBACjC,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;iBACzE;gBACD,IAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE;oBACrD,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;oBACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;iBAC/D;gBACD,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAE,EAAE;oBAClC,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;gBAChC,CAAC,CAAC,CAAC;aACJ;SACF;aACI;YACH,EAAE,CAAC,wBAAwB,GAAG,EAAE,CAAC;YACjC,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;YACxE,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;YACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;YAE9D,IAAG,EAAE,CAAC,oBAAoB,IAAI,EAAE,CAAC,aAAa,CAAC,eAAe,EAAE;gBAC9D,EAAE,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;oBAClD,IAAG,EAAE,CAAC,wBAAwB,IAAI,EAAE,EAAE;wBACpC,EAAE,CAAC,wBAAwB,GAAG,EAAE,CAAC;wBACjC,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;qBACzE;oBACD,IAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE;wBACrD,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;wBACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;qBAC/D;oBACD,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;wBAC9D,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAE,EAAE;4BAClC,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;wBAChC,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;iBACI;gBACH,IAAG,EAAE,CAAC,wBAAwB,IAAI,EAAE,EAAE;oBACpC,EAAE,CAAC,wBAAwB,GAAG,EAAE,CAAC;oBACjC,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;iBACzE;gBACD,IAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE;oBACrD,EAAE,CAAC,mBAAmB,GAAG,cAAc,CAAC;oBACxC,EAAE,CAAC,aAAa,CAAC,mBAAmB,GAAG,EAAE,CAAC,mBAAmB,CAAC;iBAC/D;gBACD,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAE,EAAE;oBAClC,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;gBAChC,CAAC,CAAC,CAAC;aACJ;SACF;IACH,CAAC;IAED,iBAAiB,CAAC,IAAI;QACpB,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,OAAO,IAAI,OAAO,CAAE,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAEtC,IAAG,IAAI,IAAI,CAAC,EAAE;gBACZ,EAAE,CAAC,aAAa,CAAC,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC;aAC7D;iBACI;gBACH,EAAE,CAAC,aAAa,CAAC,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC;aAC7D;YAED,mCAAmC;YACnC,kCAAkC;YAElC,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;gBACzC,IAAI,GAAG,IAAI,CAAC;gBACZ,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;oBAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAClB,IAAI,UAAU,GAAG,IAAI,CAAC;oBACtB,IAAI,eAAe,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;oBACnE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;oBAC7B,IAAI,YAAY,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBACxF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;oBAE1B,IAAI,WAAW,GAAG,OAAO,CAAC;oBAC1B,IAAI,iBAAiB,GAAG,QAAQ,CAAC,YAAY,EAAC,EAAE,CAAC,GAAG,EAAE,CAAC;oBACvD,IAAG,iBAAiB,IAAI,CAAC,EAAE;wBACzB,WAAW,GAAG,KAAK,CAAC;qBACrB;oBACD,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,gBAAgB,GAAG,iBAAiB,CAAC,CAAC;oBAEhE,IAAG,iBAAiB,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE;wBACjD,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;4BAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;4BAClB,IAAI,UAAU,GAAG,IAAI,CAAC;4BACtB,IAAI,eAAe,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;4BACnE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;4BAC7B,IAAI,YAAY,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;4BACxF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;4BAE1B,IAAI,WAAW,GAAG,OAAO,CAAC;4BAC1B,IAAI,iBAAiB,GAAG,QAAQ,CAAC,YAAY,EAAC,EAAE,CAAC,GAAG,EAAE,CAAC;4BACvD,IAAG,iBAAiB,IAAI,CAAC,EAAE;gCACzB,WAAW,GAAG,KAAK,CAAC;6BACrB;4BACD,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,gBAAgB,GAAG,iBAAiB,CAAC,CAAC;4BAEhE,IAAG,IAAI,IAAI,CAAC,EAAE;gCACZ,EAAE,CAAC,wBAAwB,GAAG,eAAe,GAAG,WAAW,GAAG,EAAE,CAAC;gCACjE,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;gCACxE,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,2CAA2C,GAAG,WAAW,GAAG,IAAI,CAAC,CAAC;6BAChG;iCACI;gCACH,EAAE,CAAC,wBAAwB,GAAG,eAAe,GAAG,WAAW,GAAG,EAAE,CAAC;gCACjE,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;gCACxE,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,2CAA2C,GAAG,WAAW,GAAG,IAAI,CAAC,CAAC;6BAChG;4BACD,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC;qBACJ;yBACI;wBACH,IAAG,IAAI,IAAI,CAAC,EAAE;4BACZ,EAAE,CAAC,wBAAwB,GAAG,eAAe,GAAG,WAAW,GAAG,EAAE,CAAC;4BACjE,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;4BACxE,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,2CAA2C,GAAG,WAAW,GAAG,IAAI,CAAC,CAAC;yBAChG;6BACI;4BACH,EAAE,CAAC,wBAAwB,GAAG,eAAe,GAAG,WAAW,GAAG,EAAE,CAAC;4BACjE,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;4BACxE,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,2CAA2C,GAAG,WAAW,GAAG,IAAI,CAAC,CAAC;yBAChG;wBAED,OAAO,CAAC,IAAI,CAAC,CAAC;qBACf;gBACH,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE;oBACV,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;wBAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAClB,IAAI,UAAU,GAAG,IAAI,CAAC;wBACtB,IAAI,eAAe,GAAG,EAAE,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;wBACnE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;wBAC7B,IAAI,YAAY,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBACxF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;wBAE1B,IAAI,WAAW,GAAG,OAAO,CAAC;wBAC1B,IAAI,iBAAiB,GAAG,QAAQ,CAAC,YAAY,EAAC,EAAE,CAAC,GAAG,EAAE,CAAC;wBACvD,IAAG,iBAAiB,IAAI,CAAC,EAAE;4BACzB,WAAW,GAAG,KAAK,CAAC;yBACrB;wBACD,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,gBAAgB,GAAG,iBAAiB,CAAC,CAAC;wBAEhE,IAAG,IAAI,IAAI,CAAC,EAAE;4BACZ,EAAE,CAAC,wBAAwB,GAAG,eAAe,GAAG,WAAW,GAAG,EAAE,CAAC;4BACjE,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;4BACxE,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,2CAA2C,GAAG,WAAW,GAAG,IAAI,CAAC,CAAC;yBAChG;6BACI;4BACH,EAAE,CAAC,wBAAwB,GAAG,eAAe,GAAG,WAAW,GAAG,EAAE,CAAC;4BACjE,EAAE,CAAC,aAAa,CAAC,wBAAwB,GAAG,EAAE,CAAC,wBAAwB,CAAC;4BACxE,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,2CAA2C,GAAG,WAAW,GAAG,IAAI,CAAC,CAAC;yBAChG;wBACD,OAAO,CAAC,IAAI,CAAC,CAAC;oBAChB,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;QAEL,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,gBAAgB;IAChB,mBAAmB;IACnB,2BAA2B;IAC3B,+CAA+C;IAC/C,yBAAyB;IACzB,wBAAwB;IACxB,uDAAuD;IACvD,iCAAiC;IACjC,6BAA6B;IAC7B,gCAAgC;IAChC,6BAA6B;IAC7B,kDAAkD;IAClD,wCAAwC;IACxC,YAAY;IACZ,iDAAiD;IACjD,YAAY;IACZ,SAAS;IACT,iBAAiB;IACjB,0BAA0B;IAC1B,kCAAkC;IAClC,gBAAgB;IAChB,OAAO;IACP,eAAe;IACf,wBAAwB;IACxB,QAAQ;IACR,IAAI;IAEJ,kBAAkB;IAClB,mBAAmB;IACnB,6BAA6B;IAC7B,8BAA8B;IAC9B,0DAA0D;IAC1D,iCAAiC;IACjC,4BAA4B;IAC5B,2BAA2B;IAC3B,qDAAqD;IACrD,UAAU;IACV,OAAO;IACP,eAAe;IACf,wBAAwB;IACxB,QAAQ;IACR,IAAI;IAEJ,4BAA4B;IAC5B,mBAAmB;IAEnB,8BAA8B;IAE9B,+CAA+C;IAC/C,yDAAyD;IACzD,8BAA8B;IAC9B,gDAAgD;IAChD,0CAA0C;IAC1C,+CAA+C;IAC/C,0CAA0C;IAC1C,sCAAsC;IACtC,aAAa;IACb,uBAAuB;IACvB,+BAA+B;IAC/B,wBAAwB;IACxB,YAAY;IACZ,UAAU;IACV,QAAQ;IACR,IAAI;IAEJ,sBAAsB;IACtB,mBAAmB;IACnB,yBAAyB;IAEzB,+CAA+C;IAC/C,6CAA6C;IAC7C,2BAA2B;IAC3B,0CAA0C;IAE1C,kEAAkE;IAClE,0CAA0C;IAC1C,kCAAkC;IAClC,+CAA+C;IAC/C,UAAU;IACV,wCAAwC;IACxC,sDAAsD;IAEtD,2DAA2D;IAC3D,+CAA+C;IAC/C,wEAAwE;IACxE,8DAA8D;IAC9D,oCAAoC;IACpC,kEAAkE;IAElE,yCAAyC;IACzC,UAAU;IACV,8DAA8D;IAC9D,UAAU;IACV,cAAc;IACd,0BAA0B;IAC1B,sCAAsC;IACtC,UAAU;IACV,sBAAsB;IACtB,qDAAqD;IACrD,uBAAuB;IACvB,UAAU;IAEV,QAAQ;IACR,IAAI;IAEJ,YAAY;IAEZ,oBAAoB;IAEpB,OAAO,CAAC,MAAM;QACZ,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3G,CAAC;IAED,KAAK,CAAC,IAAI;QACR,IAAI,GAAG,GAAG,IAAI,CAAC;QACf,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;YACpC,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC7D,OAAO,GAAG,CAAC;IACb,CAAC;IAED,aAAa,CAAC,SAAS;QACrB,IAAI,MAAM,GAAG,IAAI,KAAK,EAAE,CAAC;QACzB,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,SAAS,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;SAC5B;QACD,uDAAuD;QACvD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,CAAC;IAED,qBAAqB,CAAC,SAAS;QAC7B,IAAI,MAAM,GAAG,IAAI,KAAK,EAAE,CAAC;QACzB,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,sBAAsB;QACtB,0DAA0D;QAC1D,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAE,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,GAAE,CAAC,EAAE,CAAC,EAAE,EAAE;YAC/C,UAAU,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACxC;QAED,OAAO,UAAU,CAAC,CAAC,8BAA8B;IACnD,CAAC;IAED,UAAU,CAAC,SAAS;QAClB,IAAI,MAAM,GAAG,IAAI,KAAK,EAAE,CAAC;QACzB,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,SAAS,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACvC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;SAC5B;QACD,yCAAyC;QACzC,IAAI,MAAM,GAAG,MAAM,CAAC;QACpB,YAAY;QACZ,gCAAgC;QAC/B,0BAA0B;QAC3B,IAAI,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAE,CAAC,CAAC,CAAC;QAC5D,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5B,IAAI,eAAe,GAAG,EAAE,CAAC;QACzB,KAAK,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,IAAI,cAAc,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,cAAc,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;gBACvD,iDAAiD;gBACjD,8CAA8C;gBAC9C,iBAAiB;gBACjB,6CAA6C;gBAC7C,iBAAiB;gBACjB,6CAA6C;gBAC7C,iBAAiB;gBACjB,+CAA+C;gBAC/C,iBAAiB;gBACjB,gDAAgD;gBAChD,iBAAiB;gBACjB,oEAAoE;gBACpE,UAAU;gBACV,eAAe,IAAI,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;aAC3D;iBACI;gBACH,eAAe,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;aACtC;SACF;QACD,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,eAAe,CAAC,QAAQ;QACtB,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,EAAE,CAAC;SACX;QAED,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC5C,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YAC3C,MAAM,IAAI,GAAG,CAAC;SACf;QACD,OAAO,MAAM,CAAC,WAAW,EAAE,CAAC;IAC9B,CAAC;IAED,eAAe,CAAC,GAAG;QACjB,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;SAC1B;QAED,IAAI,CAAC,GAAG,EAAE,CAAC;QACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAE,CAAC,EAAE;YAC/C,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC,CAAC;SACtC;QAED,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAED,YAAY,CAAC,GAAG;QACd,OAAO;YACH,IAAI,EAAG,UAAU,QAAQ;gBACrB,OAAO;oBACH,EAAE,EAAG,UAAU,MAAM;wBACjB,OAAO,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACpD,CAAC;iBACJ,CAAC;YACN,CAAC;SACJ,CAAC;IACJ,CAAC;IAAA,CAAC;IAEF,MAAM,CAAC,GAAG;QACR,OAAO,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,MAAM,CAAC,GAAG;QACR,IAAI,GAAG,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC,wBAAwB;QACjE,IAAI,OAAO,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;QACnC,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,MAAM,GAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SAChC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;IAED,IAAI,CAAC,QAAQ;IAEb,CAAC;IAED,YAAY;IAEZ,iBAAiB;IAEX,aAAa,CAAC,OAAY;;YAC9B,IAAI,EAAE,GAAG,IAAI,CAAC;YACd,yBAAyB;YACzB,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE;gBACnD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,EAAE,CAAC,oBAAoB,GAAG,IAAI,CAAC;gBAC/B,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,EAAE,GAAE,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IAED,sCAAsC;IACtC,mBAAmB;IAEnB,iGAAiG;IAEjG,4CAA4C;IAC5C,+CAA+C;IAC/C,yBAAyB;IACzB,UAAU;IACV,2BAA2B;IAC3B,2BAA2B;IAC3B,8BAA8B;IAC9B,yEAAyE;IACzE,wCAAwC;IAExC,iCAAiC;IACjC,2DAA2D;IAC3D,qDAAqD;IACrD,gCAAgC;IAChC,0CAA0C;IAC1C,kCAAkC;IAClC,wBAAwB;IAExB,eAAe;IACf,uBAAuB;IACvB,mDAAmD;IACnD,gCAAgC;IAChC,gBAAgB;IAChB,YAAY;IACZ,WAAW;IACX,UAAU;IACV,0BAA0B;IAC1B,0BAA0B;IAC1B,2BAA2B;IAC3B,2CAA2C;IAC3C,YAAY;IACZ,UAAU;IACV,QAAQ;IACR,QAAQ;IACR,qBAAqB;IACrB,IAAI;IAEE,gBAAgB,CAAC,OAAY;;YACjC,IAAI,EAAE,GAAG,IAAI,CAAC;YACd,EAAE,CAAC,aAAa,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC7C,CAAC;KAAA;IAEK,mBAAmB;;YACvB,IAAI,EAAE,GAAG,IAAI,CAAC;YACd,EAAE,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC;QACzC,CAAC;KAAA;IAED,yCAAyC;IACzC,mBAAmB;IAEnB,oGAAoG;IACpG,4CAA4C;IAC5C,6CAA6C;IAC7C,iBAAiB;IACjB,UAAU;IACV,0BAA0B;IAC1B,0BAA0B;IAC1B,2BAA2B;IAC3B,2CAA2C;IAC3C,YAAY;IACZ,WAAW;IACX,UAAU;IACV,8BAA8B;IAC9B,2BAA2B;IAC3B,8BAA8B;IAC9B,4DAA4D;IAC5D,8CAA8C;IAC9C,gCAAgC;IAChC,0BAA0B;IAC1B,oDAAoD;IACpD,gCAAgC;IAChC,gBAAgB;IAChB,YAAY;IACZ,UAAU;IACV,QAAQ;IACR,QAAQ;IACR,qBAAqB;IACrB,IAAI;IAEJ,YAAY;IAGZ,gBAAgB;IAGhB,mBAAmB;QACjB,IAAI,EAAE,GAAG,IAAI,CAAC;QAEd,IAAI,IAAI,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,OAAO;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,OAAO;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI;QACpB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,MAAM;QACtB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,QAAQ;QACxB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,MAAM;QACtB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK;QAErB,yBAAyB;IAC3B,CAAC;IAED,YAAY;QACV,IAAI,EAAE,GAAG,IAAI,CAAC;QAEd,IAAI,IAAI,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAI;QACnB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAQ;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAQ;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAK;QACpB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAK;QACpB,EAAE,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAEzB,0CAA0C;QAC1C,0CAA0C;QAC1C,8BAA8B;QAE9B,4BAA4B;QAC5B,4DAA4D;QAC5D,oCAAoC;QACpC,iFAAiF;QACjF,iCAAiC;QACjC,+DAA+D;QAC/D,mDAAmD;QAEnD,+DAA+D;QAC/D,MAAM;QACN,UAAU;IACZ,CAAC;IAED,aAAa;QACX,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;IAC3C,CAAC;IAED,YAAY;QACV,IAAI,EAAE,GAAG,IAAI,CAAC;QAEd,IAAI,IAAI,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAI;QACnB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAQ;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAQ;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAa;QAC7B,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAY;QAC5B,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAK;QACrB,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAK;QAKrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAI;QACnB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAQ;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAQ;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAa;QAC7B,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAY;QAC5B,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAK;QACrB,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAK;QAErB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAI;QACnB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAQ;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAQ;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAY;QAC5B,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAW;QAC3B,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAK;QACrB,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAK;QAIrB,sDAAsD;QACtD,EAAE,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAEzB,uFAAuF;QAEvF,gDAAgD;QAChD,0CAA0C;QAC1C,8BAA8B;QAE9B,4BAA4B;QAC5B,4DAA4D;QAC5D,oCAAoC;QACpC,iFAAiF;QACjF,iCAAiC;QACjC,+DAA+D;QAC/D,mDAAmD;QAEnD,+DAA+D;QAC/D,QAAQ;QACR,aAAa;IACf,CAAC;IAED,cAAc;QACZ,IAAI,EAAE,GAAG,IAAI,CAAC;QAEd,IAAI,IAAI,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAI;QACnB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAQ;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAQ;QACvB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAM;QACrB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAK;QACpB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAK;QAEpB,wCAAwC;QACxC,4BAA4B;QAE5B,0BAA0B;QAC1B,0DAA0D;QAC1D,kCAAkC;QAClC,+EAA+E;QAC/E,+BAA+B;QAC/B,6DAA6D;QAC7D,kDAAkD;QAElD,kDAAkD;QAClD,MAAM;IACR,CAAC;IAED,OAAO;QACL,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,iDAAiD;QACjD,iDAAiD;QACjD,yCAAyC;QACzC,2CAA2C;QAE3C,6CAA6C;QAC7C,6CAA6C;QAE7C,kGAAkG;QAElG,uDAAuD;QAEvD,oDAAoD;QAEpD,+IAA+I;QAC/I,mJAAmJ;QAEnJ,8HAA8H;QAC9H,uGAAuG;QACvG,4IAA4I;QAC5I,sGAAsG;QAGtG,gDAAgD;QAChD,mCAAmC;QACnC,+CAA+C;QAC/C,kBAAkB;QAClB,iDAAiD;QACjD,OAAO;QACP,UAAU;IACZ,CAAC;IAED,YAAY,CAAC,KAAK;QAChB,IAAI,EAAE,GAAG,IAAI,CAAC;QAEd,IAAI,MAAM,GAAG,GAAG,CAAC;QACjB,oDAAoD;QAEpD,sBAAsB;QAEtB,2CAA2C;QAC3C,0CAA0C;QAC1C,+BAA+B;QAC/B,IAAI;QAEJ,sBAAsB;QACtB,EAAE,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAEzB,wCAAwC;QACxC,4BAA4B;QAC5B,MAAM;QAIN,uDAAuD;QACvD,uDAAuD;QACvD,oDAAoD;QACpD,sDAAsD;QACtD,wDAAwD;QACxD,qDAAqD;QAErD,0FAA0F;QAC1F,2CAA2C;QAC3C,2CAA2C;QAC3C,+BAA+B;QAE/B,uDAAuD;QACvD,uDAAuD;QAEvD,+BAA+B;QAE/B,iFAAiF;QAEjF,kEAAkE;IACpE,CAAC;CAUF;AAjuCC,cAAc;AACS,oCAAO,GAAG,CAAC,CAAC,CAAgB,yCAAyC;AACrE,kDAAqB,GAAG,GAAG,CAAC;AAC5B,oDAAuB,GAAG,GAAG,CAAC;AAC9B,gDAAmB,GAAG,GAAG,CAAC,CAAE,2CAA2C;AACvE,gDAAmB,GAAG,GAAG,CAAE,CAAC,sCAAsC;AAClE,wCAAW,GAAG,GAAG,CAAC,CAAU,cAAc;AAC1C,6CAAgB,GAAG,GAAG,CAAC,CAAK,oBAAoB;AAChD,4CAAe,GAAG,GAAG,CAAC,CAAM,kBAAkB;AAC9C,6CAAgB,GAAG,GAAG,CAAC,CAAK,0BAA0B;AACtD,6CAAgB,GAAG,GAAG,CAAC,CAAI,0CAA0C;AACrE,iDAAoB,GAAG,GAAG,CAAC,wDAAuD;AAClF,4CAAe,GAAG,GAAG,CAAC,CAAM,kDAAkD;AAC9E,gDAAmB,GAAG,GAAG,CAAC,CAAE,4CAA4C;AACxE,oDAAuB,GAAG,GAAG,CAAC;AAC9B,gDAAmB,GAAG,GAAG,CAAC,CAAE,yDAAyD;AACrF,sCAAS,GAAG,GAAG,CAAC,CAAY,yEAAyE;AACrG,8CAAiB,GAAG,GAAG,CAAC,CAAI,2CAA2C;AACvE,kDAAqB,GAAG,GAAG,CAAC,CAAC,+DAA+D;AAC5F,4CAAe,GAAG,GAAG,CAAC,CAAM,0CAA0C;AAG7F,oCAAoC;AAEpC,4BAA4B;AAC5B,4BAA4B;AAC5B,8BAA8B;AAC9B,+BAA+B;AAC/B,6BAA6B;AAC7B,6BAA6B;AAC7B,gCAAgC;AAChC,iCAAiC;AACV,kDAAqB,GAAG,CAAC,CAAC;AAC1B,gDAAmB,GAAG,CAAC,CAAC;AACxB,6CAAgB,GAAG,CAAC,CAAC;AACrB,2CAAc,GAAG,CAAC,CAAC;AACnB,6CAAgB,GAAG,CAAC,CAAC;AACrB,gDAAmB,GAAG,CAAC,CAAC;AACxB,8CAAiB,GAAG,CAAC,CAAC;AACtB,yCAAY,GAAG,CAAC,CAAC;AACjB,6CAAgB,GAAG,CAAC,CAAC;AACrB,sDAAyB,GAAG,CAAC,CAAC;AAC9B,kDAAqB,GAAG,EAAE,CAAC;AAC3B,sDAAyB,GAAG,EAAE,CAAC;AAC/B,6CAAgB,GAAG,EAAE,CAAC;AACtB,+CAAkB,GAAG,EAAE,CAAC;AACxB,6CAAgB,GAAG,EAAE,CAAC;AACtB,oDAAuB,GAAG,EAAE,CAAC;AAC7B,+CAAkB,GAAG,EAAE,CAAC;AACxB,+CAAkB,GAAG,EAAE,CAAC;AACxB,6CAAgB,GAAG,EAAE,CAAC;AACtB,+CAAkB,GAAG,EAAE,CAAC;AACxB,yCAAY,GAAG,EAAE,CAAC;AAClB,yCAAY,GAAG,EAAE,CAAC;AAClB,+CAAkB,GAAG,EAAE,CAAC;AACxB,iDAAoB,GAAG,EAAE,CAAC;AAC1B,2CAAc,GAAG,EAAE,CAAC;AACpB,gDAAmB,GAAG,EAAE,CAAC;AACzB,4CAAe,GAAG,EAAE,CAAC;AACrB,+CAAkB,GAAG,EAAE,CAAC;AACxB,oDAAuB,GAAG,EAAE,CAAC;AAC7B,2CAAc,GAAG,EAAE,CAAC;AACpB,qDAAwB,GAAG,EAAE,CAAC;AAC9B,uDAA0B,GAAG,EAAE,CAAC;AAChC,oDAAuB,GAAG,EAAE,CAAC;AAC7B,yCAAY,GAAG,EAAE,CAAC;AAClB,+CAAkB,GAAG,EAAE,CAAC;AACxB,8CAAiB,GAAG,EAAE,CAAC;AACvB,4CAAe,GAAG,EAAE,CAAC;AACrB,mDAAsB,GAAG,EAAE,CAAC;AAC5B,6CAAgB,GAAG,EAAE,CAAC;AACtB,6CAAgB,GAAG,EAAE,CAAC;AACtB,kDAAqB,GAAG,EAAE,CAAC;AAC3B,6CAAgB,GAAG,EAAE,CAAC;AACtB,qDAAwB,GAAG,EAAE,CAAC;AAC9B,uDAA0B,GAAG,EAAE,CAAC;AAChC,+CAAkB,GAAG,EAAE,CAAC;AACxB,6CAAgB,GAAG,EAAE,CAAC;AACtB,8CAAiB,GAAG,EAAE,CAAC;AACvB,kDAAqB,GAAG,EAAE,CAAC;AAC3B,4CAAe,GAAG,EAAE,CAAC;AACrB,4CAAe,GAAG,EAAE,CAAC;AACrB,sDAAyB,GAAG,EAAE,CAAC;AAC/B,gDAAmB,GAAG,EAAE,CAAC;AACzB,mDAAsB,GAAG,EAAE,CAAC;AAC5B,gDAAmB,GAAG,EAAE,CAAC;AACzB,oDAAuB,GAAG,EAAE,CAAC;AAC7B,8CAAiB,GAAG,EAAE,CAAC;AACvB,4CAAe,GAAG,EAAE,CAAC;AACrB,qDAAwB,GAAG,EAAE,CAAC;AAC9B,sDAAyB,GAAG,EAAE,CAAC;AAC/B,6CAAgB,GAAG,EAAE,CAAC;AACtB,6CAAgB,GAAG,EAAE,CAAC;AACtB,iDAAoB,GAAG,EAAE,CAAC;AAC1B,+CAAkB,GAAG,EAAE,CAAC;AACxB,+CAAkB,GAAG,EAAE,CAAC;AACxB,uDAA0B,GAAG,EAAE,CAAC;AAChC,oDAAuB,GAAG,EAAE,CAAC;AAC7B,oDAAuB,GAAG,EAAE,CAAC;AAC7B,4CAAe,GAAG,EAAE,CAAC;AACrB,kDAAqB,GAAG,EAAE,CAAC;AAC3B,oDAAuB,GAAG,EAAE,CAAC;AAC7B,+CAAkB,GAAG,EAAE,CAAC;AACxB,2CAAc,GAAG,EAAE,CAAC;AACpB,4CAAe,GAAG,EAAE,CAAC;AACrB,6CAAgB,GAAG,EAAE,CAAC;AACtB,+CAAkB,GAAG,EAAE,CAAC;AACxB,2CAAc,GAAG,EAAE,CAAC;AACpB,2CAAc,GAAG,EAAE,CAAC;AACpB,2CAAc,GAAG,EAAE,CAAC;AACpB,6CAAgB,GAAG,EAAE,CAAC;AACtB,8CAAiB,GAAG,EAAE,CAAC;AACvB,6CAAgB,GAAG,EAAE,CAAC;AACtB,+CAAkB,GAAG,EAAE,CAAC;AACxB,6CAAgB,GAAG,EAAE,CAAC;AACtB,kDAAqB,GAAG,EAAE,CAAC;AAC3B,iDAAoB,GAAG,EAAE,CAAC;AAC1B,mDAAsB,GAAG,EAAE,CAAC;AAC5B,yCAAY,GAAG,EAAE,CAAC;AAClB,yCAAY,GAAG,EAAE,CAAC;AAClB,mDAAsB,GAAG,EAAE,CAAC;AAC5B,kDAAqB,GAAG,EAAE,CAAC;AAC3B,mDAAsB,GAAG,EAAE,CAAC;AAC5B,mDAAsB,GAAG,EAAE,CAAC;AAC5B,mDAAsB,GAAG,EAAE,CAAC;AAC5B,iDAAoB,GAAG,EAAE,CAAC;AAC1B,gDAAmB,GAAG,EAAE,CAAC;AACzB,iDAAoB,GAAG,EAAE,CAAC;AAC1B,6CAAgB,GAAG,EAAE,CAAC;AACtB,8CAAiB,GAAG,EAAE,CAAC;AACvB,2CAAc,GAAG,EAAE,CAAC;AACpB,6CAAgB,GAAG,EAAE,CAAC;AACtB,+CAAkB,GAAG,GAAG,CAAC;AACzB,4CAAe,GAAG,GAAG,CAAC;AACtB,2CAAc,GAAG,GAAG,CAAC;AACrB,2CAAc,GAAG,GAAG,CAAC;;YA/JrC,mEAAa;YACb,mEAAa;YAHa,2DAAe;YAAE,6DAAiB;YAC5D,mEAAO;YADuD,2DAAe;YAI7E,yFAAS;;AAOL,4BAA4B;IALxC,wDAAS,CAAC;QACT,QAAQ,EAAE,gCAAgC;QAC1C,+FAAqD;;KAEtD,CAAC;GACW,4BAA4B,CAgvCxC;AAhvCwC;;;;;;;;;;;;;;;;ACbzC,iEAAe,8CAA8C,+IAA+I,E;;;;;;;;;;;;;;;ACA5M,iEAAe,gZAAgZ,4JAA4J,gbAAgb,2CAA2C,kBAAkB,eAAe,aAAa,udAAud,wKAAwK,aAAa,+FAA+F,6HAA6H,wBAAwB,wBAAwB,6WAA6W,ygBAAygB,cAAc,oOAAoO,YAAY,0fAA0f,cAAc,6OAA6O,wBAAwB,wBAAwB,6WAA6W,wgBAAwgB,cAAc,oOAAoO,YAAY,kgBAAkgB,cAAc,+uBAA+uB,MAAM,0NAA0N,MAAM,wEAAwE,E","file":"src_app_pages_configuration-meter-device_configuration-meter-device_module_ts.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ConfigurationMeterDevicePage } from './configuration-meter-device.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ConfigurationMeterDevicePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ConfigurationMeterDevicePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ConfigurationMeterDevicePageRoutingModule } from './configuration-meter-device-routing.module';\n\nimport { ConfigurationMeterDevicePage } from './configuration-meter-device.page';\nimport { BluetoothSerial } from '@ionic-native/bluetooth-serial/ngx';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ConfigurationMeterDevicePageRoutingModule\n  ],\n  declarations: [ConfigurationMeterDevicePage],\n  providers: [\n    BluetoothSerial\n  ]\n})\nexport class ConfigurationMeterDevicePageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { BluetoothSerial } from '@ionic-native/bluetooth-serial/ngx';\nimport { NavController, NavParams, AlertController, LoadingController, ModalController } from '@ionic/angular';\nimport { Message } from '../../framework/_common/base/message';\nimport { LCR_functions } from '../../providers/LCR_functions';\nimport { LCR_bluetooth } from '../../providers/LCR_bluetooth';\nimport { CommonSQL } from '../../framework/_common/sqlite/implementation/common-sql';\n\n@Component({\n  selector: 'app-configuration-meter-device',\n  templateUrl: './configuration-meter-device.page.html',\n  styleUrls: ['./configuration-meter-device.page.scss'],\n})\nexport class ConfigurationMeterDevicePage implements OnInit {\n\n  unpairedDevices: any;\n  pairedDevices: any;\n  gettingDevices: Boolean;\n  resultMeterValue = [];\n  resultMeterStatus = [];\n  ysnConnected: Boolean;\n  connectedToDeviceID: string;\n  meterDeviceLoop: any;\n  setGrossDeviceLoop: any;\n\n  msgTotalLen: any ;\n  ReturnMsg: any;\n\n  //Return Codes\n  public static readonly LCPR_OK = 0;                // operation was carried out successfully\n  public static readonly LCPR_AlreadyInstalled = 200;\n  public static readonly LCPR_BadNameAndRevision = 201;\n  public static readonly LCPR_BadNodeAddress = 202;  // invalid node address of host application\n  public static readonly LCPR_BadBaseAddress = 203 ; // invalid base communications address\n  public static readonly LCPR_BadIRQ = 204;          // invalid IRQ\n  public static readonly LCPR_BadBaudRate = 205;     // invalid baud rate\n  public static readonly LCPR_BadTimeout = 206;      // invalid timeout\n  public static readonly LCPR_BadTXEnable = 207;     // invalid transmit enable\n  public static readonly LCPR_NULLPointer = 208;    // a NULL pointer was passed as an address\n  public static readonly LCPR_NoRequestActive = 209;// the slave device reported that no request was active\n  public static readonly LCPR_NoResponse = 210;      // the slave device did not respond to the request\n  public static readonly LCPR_RequestAborted = 211;  // the slave device aborted the last request\n  public static readonly LCPR_UnsupportedCommand = 212;\n  public static readonly LCPR_BufferOverflow = 213;  // the slave device reports its receive buffer overflowed\n  public static readonly LCPR_Busy = 214;            // the slave device reports that it is busy but is working on the request\n  public static readonly LCPR_NotInstalled = 215;    // the LCP device drivers are not installed\n  public static readonly LCPR_MemoryAllocation = 216; // there is not enough dynamic memory available for the request\n  public static readonly LCPR_MissingMHz = 217;      // the MHz environment variable is missing\n\n\n  // LCR A to D code word definitions.\n  \n  // const LCRA_R100_0 = 0xH1;\n  // const LCRA_R128_6 = 0xH2;\n  // const LCRA_RTD_SLOPE = &H4;\n  // const LCRA_RTD_OFFSET = &H8;\n  // const LCRA_VOLT_12 = &H10;\n  // const LCRA_VOLT_16 = &H20;\n  // const LCRA_VOLT_SLOPE = &H40;\n  // const LCRA_VOLT_OFFSET = &H80;\n  public static readonly LCRF_ProductNumber_DL = 0;\n  public static readonly LCRF_ProductCode_DL = 1;\n  public static readonly LCRF_GrossQty_NE = 2;\n  public static readonly LCRF_NetQty_NE = 3;\n  public static readonly LCRF_FlowRate_NE = 4;\n  public static readonly LCRF_GrossPreset_PL = 5;\n  public static readonly LCRF_NetPreset_PL = 6;\n  public static readonly LCRF_Temp_NE = 7;\n  public static readonly LCRF_Residual_WM = 8;\n  public static readonly LCRF_PulsesPerDistance_UL = 9;\n  public static readonly LCRF_CalibDistance_UL = 10;\n  public static readonly LCRF_ProductDescriptor_DL = 11;\n  public static readonly LCRF_Odometer_UL = 12;\n  public static readonly LCRF_ShiftGross_NE = 13;\n  public static readonly LCRF_ShiftNet_NE = 14;\n  public static readonly LCRF_ShiftDeliveries_NE = 15;\n  public static readonly LCRF_ClearShift_DL = 16;\n  public static readonly LCRF_GrossTotal_WM = 17;\n  public static readonly LCRF_NetTotal_WM = 18;\n  public static readonly LCRF_DateFormat_UL = 19;\n  public static readonly LCRF_Date_UL = 20;\n  public static readonly LCRF_Time_UL = 21;\n  public static readonly LCRF_SaleNumber_WM = 22;\n  public static readonly LCRF_TicketNumber_WM = 23;\n  public static readonly LCRF_UnitID_UL = 24;\n  public static readonly LCRF_NoFlowTimer_DL = 25;\n  public static readonly LCRF_S1Close_WM = 26;\n  public static readonly LCRF_PresetType_DL = 27;\n  public static readonly LCRF_PulseOutputEdge_UL = 28;\n  public static readonly LCRF_Header_AE = 29;\n  public static readonly LCRF_TicketHeaderLine_UL = 30;\n  public static readonly LCRF_PrintGrossAndParam_WM = 31;\n  public static readonly LCRF_VolCorrectedMsg_WM = 32;\n  public static readonly LCRF_Temp_WM = 33;\n  public static readonly LCRF_TempOffset_WM = 34;\n  public static readonly LCRF_TempScale_WM = 35;\n  public static readonly LCRF_MeterID_WM = 36;\n  public static readonly LCRF_TicketRequired_WM = 37;\n  public static readonly LCRF_QtyUnits_WM = 38;\n  public static readonly LCRF_Decimals_WM = 39;\n  public static readonly LCRF_FlowDirection_WM = 40;\n  public static readonly LCRF_TimeUnit_WM = 41;\n  public static readonly LCRF_CalibrationEvent_NE = 42;\n  public static readonly LCRF_ConfigurationEvent_NE = 43;\n  public static readonly LCRF_GrossCount_NE = 44;\n  public static readonly LCRF_NetCount_NE = 45;\n  public static readonly LCRF_ProverQty_WM = 46;\n  public static readonly LCRF_PulsesPerUnit_WM = 47;\n  public static readonly LCRF_AuxMult_WM = 48;\n  public static readonly LCRF_AuxUnit_WM = 49;\n  public static readonly LCRF_CalibrationNumber_NE = 50;\n  public static readonly LCRF_LinearPoint_AE = 51;\n  public static readonly LCRF_LinearFlowRate_WM = 52;\n  public static readonly LCRF_LinearError_WM = 53;\n  public static readonly LCRF_LinearProverQty_WM = 54;\n  public static readonly LCRF_Linearize_WM = 55;\n  public static readonly LCRF_Printer_WM = 56;\n  public static readonly LCRF_CompensationType_WM = 57;\n  public static readonly LCRF_CompensationParam_WM = 58;\n  public static readonly LCRF_BaseTemp_WM = 59;\n  public static readonly LCRF_Software_NE = 60;\n  public static readonly LCRF_PricePerUnit_DL = 61;\n  public static readonly LCRF_TaxPerUnit_DL = 62;\n  public static readonly LCRF_PercentTax_DL = 63;\n  public static readonly LCRF_DiagnosticMessages_AE = 64;\n  public static readonly LCRF_TotalTaxPerUnit_NE = 65;\n  public static readonly LCRF_TotalPercentTax_NE = 66;\n  public static readonly LCRF_ADCCode_NE = 67;\n  public static readonly LCRF_SupplyVoltage_NE = 68;\n  public static readonly LCRF_PulserReversals_NE = 69;\n  public static readonly LCRF_ShiftStart_NE = 70;\n  public static readonly LCRF_AuxQty_NE = 71;\n  public static readonly LCRF_UserKey_DL = 72;\n  public static readonly LCRF_Security_UL = 73;\n  public static readonly LCRF_FactoryKey_AE = 74;\n  public static readonly LCRF_R100_0_FL = 75;\n  public static readonly LCRF_R128_6_FL = 76;\n  public static readonly LCRF_RawADC_NE = 77;\n  public static readonly LCRF_RTDSlope_FL = 78;\n  public static readonly LCRF_RTDOffset_FL = 79;\n  public static readonly LCRF_SerialID_FL = 80;\n  public static readonly LCRF_UserSetKey_FL = 81;\n  public static readonly LCRF_LCRReset_FL = 82;\n  public static readonly LCRF_CompParamType_NE = 83;\n  public static readonly LCRF_CompTempType_NE = 84;\n  public static readonly LCRF_PresetsAllowed_DL = 85;\n  public static readonly LCRF_Aux1_DL = 86;\n  public static readonly LCRF_Aux2_DL = 87;\n  public static readonly LCRF_DefaultProduct_NE = 88;\n  public static readonly LCRF_DeliveryStart_NE = 89;\n  public static readonly LCRF_DeliveryFinish_NE = 90;\n  public static readonly LCRF_LastCalibrated_NE = 91;\n  public static readonly LCRF_GrossRemaining_NE = 92;\n  public static readonly LCRF_NetRemaining_NE = 93;\n  public static readonly LCRF_ProductType_WM = 94;\n  public static readonly LCRF_SubTotalCost_NE = 95;\n  public static readonly LCRF_TotalTax_NE = 96;\n  public static readonly LCRF_TotalCost_NE = 97;\n  public static readonly LCRF_Ticket_NE = 98;\n  public static readonly LCRF_Language_NE = 99;\n  public static readonly LCRF_ShiftPassword = 105;\n  public static readonly LCRF_CustomerID = 106;\n  public static readonly LCR_NUM_FIELDS = 100;\n  public static readonly LCR_MAX_FIELDS = 256;\n\n\n  // DEVICES\n  LCPMsg: any;\n  ESC:  any = '\\x1B';\n  LCP_MsgSizeLimit = '523U';\n  LCPHostNodeAddress = 1;\n  // LCPMsg[LCP_MsgSizeLimit];\n\n\n\n  // GLOBAL VARIABLE\n  grossqty: 0;\n  LCPtxMsgPtr = [];         // pointer to the LCP transmit message buffer\n  msgLen: any;              // absolute message length\n  crc: any;                 // CRC of message\n  i: any;  \n\n  current_connected_id = '';\n\n  meter_1_test_preset_type = '';\n  meter_1_test_status = '';  \n  meter_1_bluetooth_name = '';\n  meter_1_node_address = 1;\n\n  meter_2_test_preset_type = '';\n  meter_2_test_status = '';  \n  meter_2_bluetooth_name = '';\n  meter_2_node_address = 2;\n\n\n  // ~~<to><from><status><len><data0>...<datalen-1><crc0><crc1>\n\n  // DATA_TO_LCR = [];\n  // DATA_ESC_1 = 126;\n  // DATA_ESC_2 = 126;\n  // DATA_TO = 1;\n  // DATA_FROM = 20;\n  // DATA_STATUS = 1;\n  // DATA_LEN = 0;\n  // DATA_DATA = [];\n  // DATA_DATA_LEN = 0;\n  // DATA_CRC_1 = 0;\n  // DATA_CRC_2 = 0;\n\n\n  constructor(public LCR_functions: LCR_functions, private LCR_bluetooth: LCR_bluetooth, private alertCtrl: AlertController, public loadingCtrl: LoadingController, private messageUtil: Message, private modalCtrl: ModalController, private commonSQL: CommonSQL) {\n    this.LCR_bluetooth.enableBluetooth();\n  }\n\n  ngOnInit() {\n  }\n\n  //#region FUNCTIONS\n\n  ionViewDidEnter() {\n    var me = this;\n    me.pairedDevices = [];\n    this.LCR_bluetooth.getPaired().then((data)=>me.pairedDevices = data);\n    \n    console.log('METER DEVICE LOADED');\n\n    me.meter_1_test_preset_type = me.LCR_bluetooth.meter_1_test_preset_type;\n    me.meter_2_test_preset_type = me.LCR_bluetooth.meter_2_test_preset_type;\n    me.meter_1_test_status = me.LCR_bluetooth.meter_1_test_status;\n    me.meter_2_test_status = me.LCR_bluetooth.meter_2_test_status;\n    me.meter_1_bluetooth_name = me.LCR_functions.METER_1_NAME;\n    me.meter_2_bluetooth_name = me.LCR_functions.METER_2_NAME;\n    me.meter_1_node_address = me.LCR_functions.METER_1_DATA_TO;\n    me.meter_2_node_address = me.LCR_functions.METER_2_DATA_TO;\n  }\n\n  getPaired() {\n      var me = this;\n      me.pairedDevices = [];\n      me.LCR_bluetooth.getPaired().then((data)=>me.pairedDevices = data);\n  }\n\n  scanDevices() {\n      var me = this;\n      me.unpairedDevices = [];\n      me.gettingDevices = true;\n\n      me.LCR_bluetooth.scanDevices().then((data)=>me.unpairedDevices = data);\n  }\n\n  setNodeAddress(node) {\n    var me = this;\n    if(node == 1) {\n      me.LCR_functions.METER_1_DATA_TO = me.meter_1_node_address;\n    }\n    else {\n      me.LCR_functions.METER_2_DATA_TO = me.meter_2_node_address;\n    }\n    me.messageUtil.showToastMessage(\"Setup successfully saved.\", function() {\n      me.modalCtrl.dismiss({\n        'dismissed': true\n      });\n    }, 1000);\n  }\n\n  getTestMeterName(node) {\n    var me = this;    \n\n    console.log(node);\n    \n    if(node == 1) {\n      me.meter_1_test_status = 'DISCONNECTED';\n      me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;\n\n      if(me.current_connected_id != me.LCR_functions.METER_1_ADDRESS) {\n        me.LCR_bluetooth.disconnectBluetooth().then((data)=> {\n          if(me.meter_2_test_status.indexOf('CONNECTED ') != -1) {\n            me.meter_2_test_status = 'DISCONNECTED';\n            me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n          }\n          me.connectDevice(me.LCR_functions.METER_1_ADDRESS).then((data)=> {\n            me.processTestMeterName(node);\n          });\n        });\n      }\n      else {\n        if(me.meter_2_test_status.indexOf('CONNECTED ') != -1) {\n          me.meter_2_test_status = 'DISCONNECTED';\n          me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n        }\n        me.processTestMeterName(node);\n      }\n    }\n    else {\n      me.meter_2_test_status = 'DISCONNECTED';\n      me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n\n      if(me.current_connected_id != me.LCR_functions.METER_2_ADDRESS) {\n        me.LCR_bluetooth.disconnectBluetooth().then((data)=> {\n          if(me.meter_1_test_status.indexOf('CONNECTED ') != -1) {\n            me.meter_1_test_status = 'DISCONNECTED';\n            me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;\n          }\n          me.connectDevice(me.LCR_functions.METER_2_ADDRESS).then((data)=> {\n            me.processTestMeterName(node);\n          });\n        });\n      }\n      else {\n        if(me.meter_1_test_status.indexOf('CONNECTED ') != -1) {\n          me.meter_1_test_status = 'DISCONNECTED';\n          me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;\n        }\n        me.processTestMeterName(node);\n      }\n    }\n  }\n\n  processTestMeterName(node) {\n    var me = this;\n    var _lcr = null;\n\n    if(node == 1) {\n      me.LCR_functions.DATA_TO = me.LCR_functions.METER_1_DATA_TO;\n    }\n    else {\n      me.LCR_functions.DATA_TO = me.LCR_functions.METER_2_DATA_TO;\n    }    \n\n    if(me.LCR_bluetooth.meter_1_test_preset_type.indexOf('Gross') != -1 || me.LCR_bluetooth.meter_2_test_preset_type.indexOf('Gross') != -1) {\n      me.LCR_functions.GrossTotalizer().then((data)=>{\n        _lcr = data;\n        me.LCR_bluetooth.sendToDevice(_lcr).then((data)=> {\n          console.log(data);\n          var sourceByte = data;\n          var sourceHexString = me.LCR_functions.byteToHexString(sourceByte);\n          console.log(sourceHexString);\n          var sourceString = me.LCR_functions.GetOutputDataAsString(sourceHexString).substring(4);\n          console.log(sourceString);\n          var sourceFinalOutput = parseInt(sourceString,16) / 10;                         \n          console.log('Gross Totalizer: ' + sourceFinalOutput);\n  \n          if(sourceFinalOutput == NaN || !sourceFinalOutput) {\n            me.LCR_bluetooth.sendToDevice(_lcr).then((data)=> {\n              console.log(data);\n              var sourceByte = data;\n              var sourceHexString = me.LCR_functions.byteToHexString(sourceByte);\n              console.log(sourceHexString);\n              var sourceString = me.LCR_functions.GetOutputDataAsString(sourceHexString).substring(4);\n              console.log(sourceString);\n              var sourceFinalOutput = parseInt(sourceString,16) / 10;                         \n              console.log('Gross Totalizer: ' + sourceFinalOutput);\n              if(node == 1) {\n                me.meter_1_test_status = 'CONNECTED (Gross Totalizer: ' + sourceFinalOutput + ')';\n                me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;              \n                me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer1Start = ' + sourceFinalOutput + ', dblTotalizer1End = ' + sourceFinalOutput + '');\n              }\n              else {\n                me.meter_2_test_status = 'CONNECTED (Gross Totalizer: ' + sourceFinalOutput + ')';\n                me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n                me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer2Start = ' + sourceFinalOutput + ', dblTotalizer2End = ' + sourceFinalOutput + '');\n              }            \n            });\n          }\n          else {\n            if(node == 1) {\n              me.meter_1_test_status = 'CONNECTED (Gross Totalizer: ' + sourceFinalOutput + ')';\n              me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer1Start = ' + sourceFinalOutput + ', dblTotalizer1End = ' + sourceFinalOutput + '');\n            }\n            else {\n              me.meter_2_test_status = 'CONNECTED (Gross Totalizer: ' + sourceFinalOutput + ')';\n              me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer2Start = ' + sourceFinalOutput + ', dblTotalizer2End = ' + sourceFinalOutput + '');\n            }\n          }\n        }, (data) => {\n          me.LCR_bluetooth.sendToDevice(_lcr).then((data)=> {\n            console.log(data);\n            var sourceByte = data;\n            var sourceHexString = me.LCR_functions.byteToHexString(sourceByte);\n            console.log(sourceHexString);\n            var sourceString = me.LCR_functions.GetOutputDataAsString(sourceHexString).substring(4);\n            console.log(sourceString);\n            var sourceFinalOutput = parseInt(sourceString,16) / 10;                         \n            console.log('Gross Totalizer: ' + sourceFinalOutput);\n            if(node == 1) {\n              me.meter_1_test_status = 'CONNECTED (Gross Totalizer: ' + sourceFinalOutput + ')';\n              me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer1Start = ' + sourceFinalOutput + ', dblTotalizer1End = ' + sourceFinalOutput + '');\n            }\n            else {\n              me.meter_2_test_status = 'CONNECTED (Gross Totalizer: ' + sourceFinalOutput + ')';\n              me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer2Start = ' + sourceFinalOutput + ', dblTotalizer2End = ' + sourceFinalOutput + '');\n            }\n          });\n        });\n      }, (data) => {\n        console.log(data);\n        console.log('ERROR');\n      });\n    }\n    else {\n      me.LCR_functions.NetTotalizer().then((data)=>{\n        _lcr = data;\n        me.LCR_bluetooth.sendToDevice(_lcr).then((data)=> {\n          console.log(data);\n          var sourceByte = data;\n          var sourceHexString = me.LCR_functions.byteToHexString(sourceByte);\n          console.log(sourceHexString);\n          var sourceString = me.LCR_functions.GetOutputDataAsString(sourceHexString).substring(4);\n          console.log(sourceString);\n          var sourceFinalOutput = parseInt(sourceString,16) / 10;                         \n          console.log('Net Totalizer: ' + sourceFinalOutput);\n  \n          if(sourceFinalOutput == NaN || !sourceFinalOutput) {\n            me.LCR_bluetooth.sendToDevice(_lcr).then((data)=> {\n              console.log(data);\n              var sourceByte = data;\n              var sourceHexString = me.LCR_functions.byteToHexString(sourceByte);\n              console.log(sourceHexString);\n              var sourceString = me.LCR_functions.GetOutputDataAsString(sourceHexString).substring(4);\n              console.log(sourceString);\n              var sourceFinalOutput = parseInt(sourceString,16) / 10;                         \n              console.log('Net Totalizer: ' + sourceFinalOutput);\n              if(node == 1) {\n                me.meter_1_test_status = 'CONNECTED (Net Totalizer: ' + sourceFinalOutput + ')';\n                me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;              \n                me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer1Start = ' + sourceFinalOutput + ', dblTotalizer1End = ' + sourceFinalOutput + '');\n              }\n              else {\n                me.meter_2_test_status = 'CONNECTED (Net Totalizer: ' + sourceFinalOutput + ')';\n                me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n                me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer2Start = ' + sourceFinalOutput + ', dblTotalizer2End = ' + sourceFinalOutput + '');\n              }            \n            });\n          }\n          else {\n            if(node == 1) {\n              me.meter_1_test_status = 'CONNECTED (Net Totalizer: ' + sourceFinalOutput + ')';\n              me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer1Start = ' + sourceFinalOutput + ', dblTotalizer1End = ' + sourceFinalOutput + '');\n            }\n            else {\n              me.meter_2_test_status = 'CONNECTED (Net Totalizer: ' + sourceFinalOutput + ')';\n              me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer2Start = ' + sourceFinalOutput + ', dblTotalizer2End = ' + sourceFinalOutput + '');\n            }\n          }\n        }, (data) => {\n          me.LCR_bluetooth.sendToDevice(_lcr).then((data)=> {\n            console.log(data);\n            var sourceByte = data;\n            var sourceHexString = me.LCR_functions.byteToHexString(sourceByte);\n            console.log(sourceHexString);\n            var sourceString = me.LCR_functions.GetOutputDataAsString(sourceHexString).substring(4);\n            console.log(sourceString);\n            var sourceFinalOutput = parseInt(sourceString,16) / 10;                         \n            console.log('Net Totalizer: ' + sourceFinalOutput);\n            if(node == 1) {\n              me.meter_1_test_status = 'CONNECTED (Net Totalizer: ' + sourceFinalOutput + ')';\n              me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer1Start = ' + sourceFinalOutput + ', dblTotalizer1End = ' + sourceFinalOutput + '');\n            }\n            else {\n              me.meter_2_test_status = 'CONNECTED (Net Totalizer: ' + sourceFinalOutput + ')';\n              me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET dblTotalizer2Start = ' + sourceFinalOutput + ', dblTotalizer2End = ' + sourceFinalOutput + '');\n            }\n          });\n        });\n      }, (data) => {\n        console.log(data);\n        console.log('ERROR');\n      });\n    }\n       \n  }\n\n  assignToMeter(node, device) {\n    var me = this;\n    if(node == 1) {\n      me.meter_1_bluetooth_name = device.name;\n      me.LCR_functions.METER_1_NAME = device.name;\n      me.LCR_functions.METER_1_ADDRESS = me.current_connected_id;\n    }\n    else {\n      me.meter_2_bluetooth_name = device.name;\n      me.LCR_functions.METER_2_NAME = device.name;\n      me.LCR_functions.METER_2_ADDRESS = me.current_connected_id;\n    }    \n  }\n\n  getGetPresetType(node) {\n    var me = this;    \n\n    console.log(node);\n    \n    if(node == 1) {\n      me.meter_1_test_preset_type = '';\n      me.LCR_bluetooth.meter_1_test_preset_type = me.meter_1_test_preset_type;\n      me.meter_1_test_status = 'DISCONNECTED';\n      me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;\n\n      if(me.current_connected_id != me.LCR_functions.METER_1_ADDRESS) {\n        me.LCR_bluetooth.disconnectBluetooth().then((data)=> {\n          if(me.meter_2_test_preset_type != '') {\n            me.meter_2_test_preset_type = '';\n            me.LCR_bluetooth.meter_2_test_preset_type = me.meter_2_test_preset_type;\n          }\n          if(me.meter_2_test_status.indexOf('CONNECTED ') != -1) {\n            me.meter_2_test_status = 'DISCONNECTED';\n            me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n          }\n          me.connectDevice(me.LCR_functions.METER_1_ADDRESS).then((data)=> {\n            me.processPresetType(node).then(()=>{\n              me.processTestMeterName(node);\n            });\n          });\n        });\n      }\n      else {\n        if(me.meter_2_test_preset_type != '') {\n          me.meter_2_test_preset_type = '';\n          me.LCR_bluetooth.meter_2_test_preset_type = me.meter_2_test_preset_type;\n        }\n        if(me.meter_2_test_status.indexOf('CONNECTED ') != -1) {\n          me.meter_2_test_status = 'DISCONNECTED';\n          me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n        }\n        me.processPresetType(node).then(()=>{\n          me.processTestMeterName(node);\n        });\n      }\n    }\n    else {\n      me.meter_2_test_preset_type = '';\n      me.LCR_bluetooth.meter_2_test_preset_type = me.meter_2_test_preset_type;\n      me.meter_2_test_status = 'DISCONNECTED';\n      me.LCR_bluetooth.meter_2_test_status = me.meter_2_test_status;\n\n      if(me.current_connected_id != me.LCR_functions.METER_2_ADDRESS) {\n        me.LCR_bluetooth.disconnectBluetooth().then((data)=> {\n          if(me.meter_1_test_preset_type != '') {\n            me.meter_1_test_preset_type = '';\n            me.LCR_bluetooth.meter_1_test_preset_type = me.meter_1_test_preset_type;\n          }\n          if(me.meter_1_test_status.indexOf('CONNECTED ') != -1) {\n            me.meter_1_test_status = 'DISCONNECTED';\n            me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;\n          }\n          me.connectDevice(me.LCR_functions.METER_2_ADDRESS).then((data)=> {\n            me.processPresetType(node).then(()=>{\n              me.processTestMeterName(node);\n            });\n          });\n        });\n      }\n      else {\n        if(me.meter_1_test_preset_type != '') {\n          me.meter_1_test_preset_type = '';\n          me.LCR_bluetooth.meter_1_test_preset_type = me.meter_1_test_preset_type;\n        }\n        if(me.meter_1_test_status.indexOf('CONNECTED ') != -1) {\n          me.meter_1_test_status = 'DISCONNECTED';\n          me.LCR_bluetooth.meter_1_test_status = me.meter_1_test_status;\n        }\n        me.processPresetType(node).then(()=>{\n          me.processTestMeterName(node);\n        });\n      }\n    }\n  }\n\n  processPresetType(node): Promise<any> {\n    var me = this;\n    var _lcr = null;\n\n    return new Promise ((resolve, reject) => {\n    \n      if(node == 1) {\n        me.LCR_functions.DATA_TO = me.LCR_functions.METER_1_DATA_TO;\n      }\n      else {\n        me.LCR_functions.DATA_TO = me.LCR_functions.METER_2_DATA_TO;\n      }    \n\n      //7E 7E 14 01 82 03 00 21 00 57 A9 \n      //7e 7e ff 01 82 03 00 21 00 df c8\n\n      me.LCR_functions.PresetType().then((data)=>{\n        _lcr = data;\n        me.LCR_bluetooth.sendToDevice(_lcr).then((data)=> {\n          console.log(data);\n          var sourceByte = data;\n          var sourceHexString = me.LCR_functions.byteToHexString(sourceByte);\n          console.log(sourceHexString);\n          var sourceString = me.LCR_functions.GetOutputDataAsString(sourceHexString).substring(4);\n          console.log(sourceString);\n\n          var _presetType = 'Gross';\n          var sourceFinalOutput = parseInt(sourceString,16) / 10;                         \n          if(sourceFinalOutput != 0) {\n            _presetType = 'Net';\n          }\n          console.log(_presetType + ' Preset Type: ' + sourceFinalOutput);\n\n          if(sourceFinalOutput == NaN || !sourceFinalOutput) {\n            me.LCR_bluetooth.sendToDevice(_lcr).then((data)=> {\n              console.log(data);\n              var sourceByte = data;\n              var sourceHexString = me.LCR_functions.byteToHexString(sourceByte);\n              console.log(sourceHexString);\n              var sourceString = me.LCR_functions.GetOutputDataAsString(sourceHexString).substring(4);\n              console.log(sourceString);\n              \n              var _presetType = 'Gross';\n              var sourceFinalOutput = parseInt(sourceString,16) / 10;\n              if(sourceFinalOutput != 0) {\n                _presetType = 'Net';\n              }\n              console.log(_presetType + ' Preset Type: ' + sourceFinalOutput);\n          \n              if(node == 1) {\n                me.meter_1_test_preset_type = 'Preset Type: ' + _presetType + '';\n                me.LCR_bluetooth.meter_1_test_preset_type = me.meter_1_test_preset_type;              \n                me.commonSQL.updateDataQuery('UPDATE globalinfo SET strPresetType1 = \\'' + _presetType + '\\'');\n              }\n              else {\n                me.meter_2_test_preset_type = 'Preset Type: ' + _presetType + '';\n                me.LCR_bluetooth.meter_2_test_preset_type = me.meter_2_test_preset_type;\n                me.commonSQL.updateDataQuery('UPDATE globalinfo SET strPresetType2 = \\'' + _presetType + '\\'');\n              }            \n              resolve(true);\n            });\n          }\n          else {\n            if(node == 1) {\n              me.meter_1_test_preset_type = 'Preset Type: ' + _presetType + '';\n              me.LCR_bluetooth.meter_1_test_preset_type = me.meter_1_test_preset_type;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET strPresetType1 = \\'' + _presetType + '\\'');\n            }\n            else {\n              me.meter_2_test_preset_type = 'Preset Type: ' + _presetType + '';\n              me.LCR_bluetooth.meter_2_test_preset_type = me.meter_2_test_preset_type;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET strPresetType2 = \\'' + _presetType + '\\'');\n            }\n\n            resolve(true);\n          }\n        }, (data) => {\n          me.LCR_bluetooth.sendToDevice(_lcr).then((data)=> {\n            console.log(data);\n            var sourceByte = data;\n            var sourceHexString = me.LCR_functions.byteToHexString(sourceByte);\n            console.log(sourceHexString);\n            var sourceString = me.LCR_functions.GetOutputDataAsString(sourceHexString).substring(4);\n            console.log(sourceString);\n            \n            var _presetType = 'Gross';\n            var sourceFinalOutput = parseInt(sourceString,16) / 10;\n            if(sourceFinalOutput != 0) {\n              _presetType = 'Net';\n            }\n            console.log(_presetType + ' Preset Type: ' + sourceFinalOutput);\n\n            if(node == 1) {\n              me.meter_1_test_preset_type = 'Preset Type: ' + _presetType + '';\n              me.LCR_bluetooth.meter_1_test_preset_type = me.meter_1_test_preset_type;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET strPresetType1 = \\'' + _presetType + '\\'');\n            }\n            else {\n              me.meter_2_test_preset_type = 'Preset Type: ' + _presetType + '';\n              me.LCR_bluetooth.meter_2_test_preset_type = me.meter_2_test_preset_type;\n              me.commonSQL.updateDataQuery('UPDATE globalinfo SET strPresetType2 = \\'' + _presetType + '\\'');\n            }\n            resolve(true);\n          });\n        });\n      }, (data) => {\n        console.log(data);\n        console.log('ERROR');\n        reject(true);\n      });    \n\n    });\n  }\n\n\n  // getPaired() {\n  //   var me = this;\n  //   me.pairedDevices = [];\n  //   me.bluetoothSerial.list().then((list) => {\n  //     console.log(list);\n  //     var _list = list;\n  //     me.bluetoothSerial.isConnected().then((res) => {\n  //       console.log(res);       \n  //       console.log(_list); \n  //       _list.forEach(item => {\n  //         console.log(item);\n  //         if(item.id == me.connectedToDeviceID) {\n  //           item.ysnConnected = 'true';\n  //         }\n  //         me.pairedDevices.push(item);          \n  //       });\n  //     },\n  //     (err) => {\n  //       console.log(err);\n  //       me.pairedDevices = _list;\n  //     });      \n  //   },\n  //   (err) => {\n  //     console.log(err);\n  //   });\n  // }\n\n  // scanDevices() {\n  //   var me = this;\n  //   me.unpairedDevices = [];\n  //   me.gettingDevices = true;\n  //   me.bluetoothSerial.discoverUnpaired().then((res) => {\n  //     me.gettingDevices = false;\n  //     res.forEach(item => {\n  //       console.log(item);\n  //       if(item.name) me.unpairedDevices.push(item);\n  //     });\n  //   },\n  //   (err) => {\n  //     console.log(err);\n  //   });\n  // }\n\n  // sendToDevice(data: any) {\n  //   var me = this;\n\n  //   console.log(data.buffer);\n\n  //   return new Promise ((resolve, reject) => {\n  //     me.bluetoothSerial.write(data.buffer).then(() => {\n  //       console.log('clear');\n  //       me.bluetoothSerial.clear().then(() => {\n  //         console.log('processToDevice');\n  //         me.processToDevice().then((res) => {\n  //           console.log(res);            \n  //           resolve(res);            \n  //         },\n  //         (error) => {\n  //           console.log(error)\n  //         });          \n  //       });\n  //     });\n  //   });\n  // }\n\n  // processToDevice() {\n  //   var me = this;\n  //   var _byteArray = [];\n\n  //   return new Promise ((resolve, reject) => {\n  //     me.msgTotalLen = 0; //reset every call\n  //     me.ReturnMsg = '';  \n  //     var msgPreBytes = new Uint8Array(6)\n    \n  //     me.bluetoothSerial.subscribeRawData().subscribe((data) => {\n  //       var bytes = new Uint8Array(data);\n  //       if(me.msgTotalLen <= 0 ){\n  //         msgPreBytes.set(bytes.slice(0,6),0);\n  //       }\n  //       me.msgTotalLen += bytes.length;\n  //       // me.ReturnMsg += me.byteToHexString(bytes);\n\n  //       // console.log('Message Prefix : ' + msgPreBytes);\n  //       // console.log('Raw Bytes: ' + bytes);\n  //       // console.log('Direct Convert: ' + me.byteToHexString(bytes));\n  //       // console.log('HexString: ' + me.ReturnMsg);        \n  //       // console.log(_byteArray);\n  //       // console.log('---------- END BLUETOOTH -------------');\n\n  //       if (me.msgTotalLen < 6) { //skip\n  //       }\n  //       else if((me.msgTotalLen-6) < msgPreBytes[5]) { //skip\n  //       }\n  //       else{\n  //         resolve(bytes);\n  //         me.bluetoothSerial.clear();\n  //       }\n  //     }, (error) => {\n  //       console.log('Failed: ' + error);            \n  //       reject(error);\n  //     });\n      \n  //   });\n  // }\n\n  //#endregion\n\n  //#region CONVERSION\n\n  buf2hex(buffer) { // buffer is an ArrayBuffer\n    return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\n  }\n\n  hex2a(hexx) { //var hex = hexx.toString();//force conversion\n    var hex = hexx;\n    var str = '';\n    for (var i = 0; i < hex.length; i += 2)\n      str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    return str;\n  }\n\n  GetOutputData(hexString){\n    var binary = new Array();\n    for (var i=0; i<hexString.length/2; i++) {\n      var h = hexString.substr(i*2, 2);\n      binary[i] = parseInt(h,16);        \n    }\n    //var outputDataOnly = this.hexStringToByte(hexString);\n    return binary.slice(6 + 2 , 6 + binary[5] - 1);\n  }\n\n  GetOutputDataAsString(hexString){\n    var binary = new Array();\n    var OutputData = \"\";\n    //-minus 4 for the CRC\n    //initital loop = 5 - removing to, from , status, length  \n    for (var i=6; i< (hexString.length - 4) /2; i++) {\n      OutputData += hexString.substr(i*2, 2);\n    }\n    \n    return OutputData; //still contains rc, devstatus\n  }\n\n  HexToAscii(HexString){    \n    var binary = new Array();\n    for (var i=0; i<HexString.length/2; i++) {\n      var h = HexString.substr(i*2, 2);\n      binary[i] = parseInt(h,16);        \n    }\n    //console.log(\"Length:\" + binary.length);\n    var output = binary;\n    //6 = prefix\n    //2 = Return Code, Device Status\n     // -1 = Text field len - 1\n    var outputDataOnly = output.slice(6 + 2 , 6 + binary[5]- 1);\n    console.log(outputDataOnly);\n    var convertedString = \"\";\n    for (i=0; i<outputDataOnly.length; i++) {\n      if (outputDataOnly[i] >= 32 && outputDataOnly[i] <= 126) {\n        // // // switch(String.fromCharCode(output[i])) {\n        // // // case '&': convertedString += \"&amp;\";\n        // // //   break;\n        // // // case '<': convertedString += \"&lt;\";\n        // // //   break;\n        // // // case '>': convertedString += \"&gt;\";\n        // // //   break;\n        // // // case '\"': convertedString += \"&quot;\";\n        // // //   break;\n        // // // case '\\'': convertedString += \"&#039;\";\n        // // //   break;\n        // // // default: convertedString += String.fromCharCode(output[i]);\n        // // // }\n        convertedString += String.fromCharCode(outputDataOnly[i]);\n      }\n      else {\n        convertedString += outputDataOnly[i];\n      }\n    }\n    return convertedString;\n  }\n\n  byteToHexString(uint8arr) {\n    if (!uint8arr) {\n      return '';\n    }\n    \n    var hexStr = '';\n    for (var i = 0; i < uint8arr.length; i++) {\n      var hex = (uint8arr[i] & 0xff).toString(16);\n      hex = (hex.length === 1) ? '0' + hex : hex;\n      hexStr += hex;\n    }    \n    return hexStr.toUpperCase();\n  }\n  \n  hexStringToByte(str) {\n    if (!str) {\n      return new Uint8Array(1);\n    }\n    \n    var a = [];\n    for (var i = 0, len = str.length; i < len; i+=2) {\n      a.push(parseInt(str.substr(i,2),16));\n    }\n    \n    return new Uint8Array(a);\n  }\n\n  hexToDecimal(num) {\n    return {\n        from : function (baseFrom) {\n            return {\n                to : function (baseTo) {\n                    return parseInt(num, baseFrom).toString(baseTo);\n                }\n            };\n        }\n    };\n  };\n\n  ab2str(buf) {\n    return String.fromCharCode.apply(null, new Uint16Array(buf));\n  }\n  \n  str2ab(str) {\n    var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char\n    var bufView = new Uint16Array(buf);\n    for (var i=0, strLen=str.length; i<strLen; i++) {\n      bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n  }\n\n  read(numBytes) {\n\n  }\n\n  //#endregion\n\n  //#region BUTTONS\n\n  async connectDevice(address: any) {\n    var me = this;\n    // me.pairedDevices = [];\n    me.LCR_bluetooth.connectDevice(address).then((data)=> {\n      console.log(data);\n      me.current_connected_id = data;\n      me.LCR_bluetooth.getPaired().then((data)=>me.pairedDevices = data);\n    });   \n  }\n\n  // async connectDevice(address: any) {\n  //   var me = this;\n\n  //   let loader = await me.loadingCtrl.create({message: \"Connecting...\", backdropDismiss: true});\n\n  //   let alert = await me.alertCtrl.create({\n  //     message: 'Do you want to connect with?',\n  //     buttons: [        \n  //       {\n  //         text: 'Connect',\n  //         handler: () => {\n  //           loader.present();\n  //           me.bluetoothSerial.connect(address.id).subscribe((res) => { \n  //             console.log('connected');\n\n  //             setTimeout(() => {\n  //               console.log('get paired');                \n  //               me.connectedToDeviceID = address.id;\n  //               me.getPaired();\n  //               me.startDeviceToListen();\n  //               loader.dismiss();\n  //             }, 5000);\n\n  //           },\n  //           (res) => {\n  //             me.alertCtrl.create({message: res});\n  //             loader.dismiss();\n  //           });\n  //         }\n  //       },\n  //       {\n  //         text: 'Cancel',\n  //         role: 'cancel',\n  //         handler: () => {\n  //           console.log('Cancel clicked');\n  //         }\n  //       }\n  //     ]\n  //   });\n  //   alert.present();\n  // }\n\n  async disconnectDevice(address: any) {\n    var me = this;\n    me.LCR_bluetooth.disconnectDevice(address);    \n  }\n\n  async disconnectBluetooth() {\n    var me = this;\n    me.LCR_bluetooth.disconnectBluetooth();\n  }\n\n  // async disconnectDevice(address: any) {\n  //   var me = this;\n\n  //   let loader = await me.loadingCtrl.create({message: \"Disconnecting...\", backdropDismiss: true});\n  //   let alert = await me.alertCtrl.create({\n  //     message: 'Do you want to Disconnect?',\n  //     buttons: [\n  //       {\n  //         text: 'Cancel',\n  //         role: 'cancel',\n  //         handler: () => {\n  //           console.log('Cancel clicked');\n  //         }\n  //       },\n  //       {\n  //         text: 'Disconnect',\n  //         handler: () => {\n  //           loader.present();\n  //           me.bluetoothSerial.disconnect().then((res) => {\n  //             address.ysnConnected = 'false';\n  //             loader.dismiss();\n  //           }, (res) => {\n  //             me.alertCtrl.create({message: res}); \n  //             loader.dismiss();\n  //           });\n  //         }\n  //       }\n  //     ]\n  //   });\n  //   alert.present();\n  // }\n\n  //#endregion\n\n\n  //#region DEVICE\n\n\n  startDeviceToListen() {\n    var me = this;\n\n    var data = new Uint8Array(9);\n    data[0] = 0x7E; //start\n    data[1] = 0x7E; //start\n    data[2] = 0x01; //to\n    data[3] = 0xFF; //from\n    data[4] = 0x02; //status\n    data[5] = 0x01; //len\n    data[6] = 0x00; //data\n    data[7] = 0x8C; //CRC\n    data[8] = 0x27; //CRC\n\n    // me.sendToDevice(data);\n  }    \n\n  getMeterData() {\n    var me = this;    \n\n    var data = new Uint8Array(10);\n    data[0] = 0x7E;\n    data[1] = 0x7E;\n    data[2] = 0x01;//to\n    data[3] = 0xFF;//from\n    data[4] = 0x01;//status\n    data[5] = 0x02;//length\n    data[6] = 0x20;//data\n    data[7] = 0x02;//data\n    data[8] = 0xB7;//CRC\n    data[9] = 0x9D;//CRC\n    me.resultMeterValue = [];\n\n    // me.meterDeviceLoop = setInterval(() => \n    //   me.sendToDevice(data).then((res) => {\n    //     console.log(res);      \n\n    //     var sourceByte = res;\n    //     var sourceHexString = me.byteToHexString(sourceByte);\n    //     console.log(sourceHexString);\n    //     var sourceString = me.GetOutputDataAsString(sourceHexString).substring(4);\n    //     console.log(sourceString);\n    //     var sourceFinalOutput = parseInt(sourceString,16) / 10; \n    //     me.resultMeterValue.push(sourceFinalOutput);\n        \n    //     console.log('Meter Gross Amount: ' + sourceFinalOutput);\n    //   }\n    // ),500);\n  }\n\n  stopMeterData() {\n    var me = this;\n    window.clearInterval(me.meterDeviceLoop); \n  }\n\n  setGrossData() {\n    var me = this;    \n\n    var data = new Uint8Array(14);\n    data[0] = 0x7E;\n    data[1] = 0x7E;\n    data[2] = 0x01;//to\n    data[3] = 0x14;//from\n    data[4] = 0x00;//status\n    data[5] = 0x06;//length\n    data[6] = 0x21;//data\n    data[7] = 0x05;//data\n    data[8] = 0x00;//data\n    data[9] = 0x00;//data\n    data[10] = 0x13;//data // 500\n    data[11] = 0x88;//CRC // 500\n    data[12] = 0x10;//CRC\n    data[13] = 0xBE;//CRC\n\n\n\n\n    data[0] = 0x7E;\n    data[1] = 0x7E;\n    data[2] = 0x01;//to\n    data[3] = 0x14;//from\n    data[4] = 0x00;//status\n    data[5] = 0x06;//length\n    data[6] = 0x21;//data\n    data[7] = 0x05;//data\n    data[8] = 0x00;//data\n    data[9] = 0x00;//data\n    data[10] = 0x13;//data // 500\n    data[11] = 0x88;//CRC // 500\n    data[12] = 0xf0;//CRC\n    data[13] = 0x41;//CRC\n\n    data[0] = 0x7E;\n    data[1] = 0x7E;\n    data[2] = 0x01;//to\n    data[3] = 0x14;//from\n    data[4] = 0x01;//status\n    data[5] = 0x06;//length\n    data[6] = 0x21;//data\n    data[7] = 0x05;//data\n    data[8] = 0x00;//data\n    data[9] = 0x00;//data\n    data[10] = 0x00;//data // 11\n    data[11] = 0x6E;//CRC // 11\n    data[12] = 0xF6;//CRC\n    data[13] = 0xAD;//CRC\n\n    \n\n    // var data = this.createHexaDecimal_set(me.grossqty);\n    me.resultMeterValue = [];\n\n    // [0x7E, 0x7E, 0x01, 0x14, 0x00, 0x06, 0x21, 0x05, 0x00, 0x00, 0x01, 0xC2, 0xFA, 0xE9]\n\n    // // me.setGrossDeviceLoop = setInterval(() => \n    //   me.sendToDevice(data).then((res) => {\n    //     console.log(res);      \n\n    //     var sourceByte = res;\n    //     var sourceHexString = me.byteToHexString(sourceByte);\n    //     console.log(sourceHexString);\n    //     var sourceString = me.GetOutputDataAsString(sourceHexString).substring(4);\n    //     console.log(sourceString);\n    //     var sourceFinalOutput = parseInt(sourceString,16) / 10; \n    //     me.resultMeterValue.push(sourceFinalOutput);\n        \n    //     console.log('Meter Gross Amount: ' + sourceFinalOutput);\n    //   });\n    // // ),500);\n  }\n\n  getMeterStatus() {\n    var me = this;\n\n    var data = new Uint8Array(9);\n    data[0] = 0x7E;\n    data[1] = 0x7E;\n    data[2] = 0x01;//to\n    data[3] = 0xFF;//from\n    data[4] = 0x01;//status\n    data[5] = 0x02;//length\n    data[6] = 0x23;//data\n    data[7] = 0xB7;//CRC\n    data[8] = 0x9D;//CRC\n\n    // me.sendToDevice(data).then((res) => {\n    //   console.log(res);      \n\n    //   var sourceByte = res;\n    //   var sourceHexString = me.byteToHexString(sourceByte);\n    //   console.log(sourceHexString);\n    //   var sourceString = me.GetOutputDataAsString(sourceHexString).substring(4);\n    //   console.log(sourceString);\n    //   var sourceFinalOutput = parseInt(sourceString,16) / 10; \n    //   me.resultMeterStatus.push(sourceFinalOutput);\n      \n    //   console.log('Meter Status: ' + sourceString);\n    // });\n  }\n\n  openLCR() {\n    var me = this;\n    // me.bluetoothSerial.write([0x7E]); //msg prefix\n    // me.bluetoothSerial.write([0x7E]); //msg prefix\n    // me.bluetoothSerial.write([0x01]); //To\n    // me.bluetoothSerial.write([0xFF]); //From\n    \n    // me.bluetoothSerial.write([0x01]); //Status\n    // me.bluetoothSerial.write([0x02]); //Length\n\n    // me.bluetoothSerial.write([0x24]); //Data - Message ID to get field data.  Set to 24h. (Command)\n    \n    // me.bluetoothSerial.write(['0x00']); //Data - command\n\n    // me.bluetoothSerial.write([0xbe]); //CRC Hardcoded\n\n    // this.bluetoothSerial.write([0x9d]).then(() => {this.subscribe().then((rmsg) =>  console.log('Response message: ' + rmsg ) ); //CRC Hardcoded\n    //                                               console.log('END OF COMMAND : GetProductDesc'); }, () => { console.log('Send command failed'); });\n\n    // this.bluetoothSerial.write([0x9d]).then(() => {this.subscribe().then((rmsg) =>  this.productDesc = rmsg  ); //CRC Hardcoded\n    //                                               console.log('Response message: ' + this.productDesc );\n    // //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n    // console.log('END OF COMMAND : GetProductDesc '); }, () => { console.log('Send command failed'); });\n\n\n    // me.bluetoothSerial.write([0x9d]).then(() => {\n    //   me.subscribe().then((res) => {\n    //     console.log('Response message: ' + res);\n    //   }, (res) => {\n    //     console.log('Send command failed: ' + res)\n    //   })\n    // });    \n  }\n\n  test_dynamic(value) {\n    var me = this;\n\n    var _value = 500;\n    // var _data = me.LCR_functions.BuildPreset(_value);\n\n    // console.log(_data);\n\n    // var data = new Uint8Array(_data.length);\n    // for(var x = 0; x < _data.length; x++) {\n    //   data.fill(_data[x],x,x+1);\n    // }\n\n    // console.log(_data);\n    me.resultMeterValue = [];\n\n    // me.sendToDevice(data).then((res) => {\n    //   console.log(res);      \n    // });\n\n\n\n    // me.DATA_TO_LCR.push(me.DecimalToHex(me.DATA_ESC_1));\n    // me.DATA_TO_LCR.push(me.DecimalToHex(me.DATA_ESC_2));\n    // me.DATA_TO_LCR.push(me.DecimalToHex(me.DATA_TO));\n    // me.DATA_TO_LCR.push(me.DecimalToHex(me.DATA_FROM));\n    // me.DATA_TO_LCR.push(me.DecimalToHex(me.DATA_STATUS));\n    // me.DATA_TO_LCR.push(me.DecimalToHex(me.DATA_LEN));\n\n    // me.DATA_TO_LCR.push(me.DecimalToHex(ConfigurationMeterDevicePage.LCRF_GrossPreset_PL));\n    // me.DATA_TO_LCR.push(me.DecimalToHex(0));\n    // me.DATA_TO_LCR.push(me.DecimalToHex(0));\n    // me.DecimalToHex_Preset(500);\n\n    // me.DATA_TO_LCR.push(me.DecimalToHex(me.DATA_CRC_1));\n    // me.DATA_TO_LCR.push(me.DecimalToHex(me.DATA_CRC_2));\n\n    // console.log(me.DATA_TO_LCR);\n\n    // me.LCR_functions.BuildLCRMessage('7E 7E 01 14 00 06 21 05 00 00 13 88 00 00');\n    \n    // me.LCPBuildMessage(1,1,[126,126,1,20,1,6,33,5,0,0,19,136], 6); \n  }\n\n\n\n\n  //#endregion\n\n\n\n\n}\n\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb25maWd1cmF0aW9uLW1ldGVyLWRldmljZS5wYWdlLnNjc3MifQ== */\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Meter Devices</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>  \\n  <ion-list padding>\\n    <!-- <ion-button ion-button expand=\\\"block\\\" (click)=\\\"scanDevices()\\\">SCAN</ion-button> -->\\n    <ion-list-header style=\\\"font-weight: bolder;\\\">\\n      Paired Devices\\n    </ion-list-header>\\n    <ion-grid no-padding>    \\n      <ion-row justify-content-start *ngFor=\\\"let device of pairedDevices; let i=index\\\">   \\n        <ion-col size=\\\"2\\\">\\n          <ion-button ion-button expand=\\\"block\\\" (click)=\\\"disconnectDevice(device)\\\" *ngIf=\\\"device.ysnConnected === 'true'\\\">Disconnect</ion-button>  \\n          <ion-button ion-button expand=\\\"block\\\" (click)=\\\"connectDevice(device)\\\" *ngIf=\\\"device.ysnConnected != 'true'\\\">Connect</ion-button>  \\n        </ion-col>\\n        <ion-col size=\\\"3\\\" text-left style=\\\"margin: auto;\\\">\\n          <label style=\\\"color: black; text-align: left;\\\" text-left>{{device.name}}</label>\\n        </ion-col>\\n        <ion-button ion-button expand=\\\"block\\\" (click)=\\\"assignToMeter(1, device)\\\" *ngIf=\\\"device.ysnConnected === 'true'\\\">Assign to Meter #1</ion-button>  \\n        <ion-button ion-button expand=\\\"block\\\" (click)=\\\"assignToMeter(2, device)\\\" *ngIf=\\\"device.ysnConnected === 'true'\\\">Assign to Meter #2</ion-button>  \\n        <ion-col></ion-col> \\n      </ion-row>\\n    </ion-grid>\\n    <!-- <ion-list-header style=\\\"font-weight: bolder;\\\">\\n      Availlable Devices\\n    </ion-list-header>\\n    <ion-item *ngFor='let device of unpairedDevices' (click)=\\\"connectDevice(device)\\\">\\n      <span>\\n        {{device.name}}\\n      </span>\\n    </ion-item> -->\\n\\n    <br>\\n    <ion-spinner style=\\\"align-items: center;\\\" name=\\\"crescent\\\" *ngIf=\\\"gettingDevices\\\"></ion-spinner>\\n    <br>\\n\\n\\n    <ion-list-header style=\\\"font-weight: bolder;\\\">\\n      METER #1 : {{meter_1_bluetooth_name}}\\n    </ion-list-header>\\n    <ion-grid no-padding>    \\n      <ion-row justify-content-start>   \\n        <ion-col size=\\\"3\\\">\\n          <ion-button ion-button expand=\\\"block\\\" (click)=\\\"setNodeAddress(1)\\\" [disabled]=\\\"meter_1_bluetooth_name == ''\\\">SET NODE ADDRESS</ion-button>  \\n        </ion-col>\\n        <ion-col size=\\\"3\\\" text-left style=\\\"margin: auto;\\\">\\n          <ion-input type=\\\"number\\\" [(ngModel)]=\\\"meter_1_node_address\\\"></ion-input>\\n        </ion-col>\\n        <ion-col></ion-col> \\n      </ion-row>      \\n      <ion-row justify-content-start>   \\n        <ion-col size=\\\"3\\\">\\n          <ion-button ion-button expand=\\\"block\\\" (click)=\\\"getGetPresetType(1)\\\" [disabled]=\\\"meter_1_bluetooth_name == ''\\\">TEST CONNECTION</ion-button>  \\n        </ion-col>\\n        <ion-col text-left *ngIf=\\\"!meter_1_test_status.includes('DISCONNECTED')\\\" style=\\\"margin: auto; color: green;\\\">\\n          <ion-input readonly=\\\"true\\\" [(ngModel)]=\\\"meter_1_test_status\\\"></ion-input>\\n        </ion-col>\\n        <ion-col size=\\\"3\\\" text-left *ngIf=\\\"meter_1_test_status.includes('DISCONNECTED')\\\" style=\\\"margin: auto; color: red;\\\">\\n          <ion-input readonly=\\\"true\\\" [(ngModel)]=\\\"meter_1_test_status\\\"></ion-input>\\n        </ion-col>\\n        <ion-col></ion-col> \\n      </ion-row>\\n      <!-- <ion-row justify-content-start>   \\n        <ion-col size=\\\"3\\\">\\n          <ion-button ion-button expand=\\\"block\\\" (click)=\\\"getGetPresetType(1)\\\" [disabled]=\\\"meter_1_bluetooth_name == ''\\\">GET PRESET TYPE</ion-button>  \\n        </ion-col>\\n        <ion-col text-left *ngIf=\\\"meter_1_test_preset_type != ''\\\" style=\\\"margin: auto; color: green;\\\">\\n          <ion-input readonly=\\\"true\\\" [(ngModel)]=\\\"meter_1_test_preset_type\\\"></ion-input>\\n        </ion-col>\\n        <ion-col></ion-col> \\n      </ion-row> -->\\n    </ion-grid>\\n    <ion-list-header style=\\\"font-weight: bolder;\\\">\\n      METER #2 : {{meter_2_bluetooth_name}}\\n    </ion-list-header>\\n    <ion-grid no-padding>    \\n      <ion-row justify-content-start>   \\n        <ion-col size=\\\"3\\\">\\n          <ion-button ion-button expand=\\\"block\\\" (click)=\\\"setNodeAddress(2)\\\" [disabled]=\\\"meter_2_bluetooth_name == ''\\\">SET NODE ADDRESS</ion-button>  \\n        </ion-col>\\n        <ion-col size=\\\"3\\\" text-left style=\\\"margin: auto;\\\">\\n          <ion-input type=\\\"number\\\" [(ngModel)]=\\\"meter_2_node_address\\\"></ion-input>\\n        </ion-col>\\n        <ion-col></ion-col> \\n      </ion-row>     \\n      <ion-row justify-content-start>   \\n        <ion-col size=\\\"3\\\">\\n          <ion-button ion-button expand=\\\"block\\\" (click)=\\\"getGetPresetType(2)\\\" [disabled]=\\\"meter_2_bluetooth_name == ''\\\">TEST CONNECTION</ion-button>  \\n        </ion-col>\\n        <ion-col text-left *ngIf=\\\"!meter_2_test_status.includes('DISCONNECTED')\\\" style=\\\"margin: auto; color: green;\\\">\\n          <ion-input readonly=\\\"true\\\" [(ngModel)]=\\\"meter_2_test_status\\\"></ion-input>\\n        </ion-col>\\n        <ion-col size=\\\"3\\\" text-left *ngIf=\\\"meter_2_test_status.includes('DISCONNECTED')\\\" style=\\\"margin: auto; color: red;\\\">\\n          <ion-input readonly=\\\"true\\\" [(ngModel)]=\\\"meter_2_test_status\\\"></ion-input>\\n        </ion-col>        \\n        <ion-col></ion-col> \\n      </ion-row>\\n      <!-- <ion-row justify-content-start>   \\n        <ion-col size=\\\"3\\\">\\n          <ion-button ion-button expand=\\\"block\\\" (click)=\\\"getGetPresetType(2)\\\" [disabled]=\\\"meter_2_bluetooth_name == ''\\\">GET PRESET TYPE</ion-button>  \\n        </ion-col>\\n        <ion-col text-left *ngIf=\\\"meter_2_test_preset_type != ''\\\" style=\\\"margin: auto; color: green;\\\">\\n          <ion-input readonly=\\\"true\\\" [(ngModel)]=\\\"meter_2_test_preset_type\\\"></ion-input>\\n        </ion-col>\\n        <ion-col></ion-col> \\n      </ion-row> -->\\n    </ion-grid>\\n\\n    \\n\\n    <!-- <ion-input type=\\\"number\\\" [(ngModel)]=\\\"grossqty\\\"></ion-input>\\n    <ion-button ion-button expand=\\\"block\\\" (click)=\\\"setGrossData()\\\">SEND GROSS VALUE</ion-button>\\n    <ion-button ion-button expand=\\\"block\\\" (click)=\\\"test_dynamic()\\\">SEND TEST VALUE</ion-button>\\n    <ion-button ion-button expand=\\\"block\\\" (click)=\\\"getMeterData()\\\">Test Meter Value</ion-button>\\n    <ion-button ion-button expand=\\\"block\\\" (click)=\\\"stopMeterData()\\\">STOP</ion-button>    \\n    <ion-item *ngFor='let item of resultMeterValue'>\\n      <span>\\n        {{item}}\\n      </span>\\n    </ion-item>\\n    <ion-button ion-button expand=\\\"block\\\" (click)=\\\"getMeterStatus()\\\">Test Meter Status</ion-button>\\n    <ion-item *ngFor='let item of resultMeterStatus'>\\n      <span>\\n        {{item}}\\n      </span>\\n    </ion-item> -->\\n\\n  </ion-list>\\n</ion-content>\\n\";"],"sourceRoot":"webpack:///"}